"use strict";(self.webpackChunkapuntes_dart=self.webpackChunkapuntes_dart||[]).push([[7569],{3644:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>d,contentTitle:()=>t,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>o});var r=n(5893),s=n(1151);const i={sidebar_label:"Programaci\xf3n orientada a objetos en Dart",sidebar_position:2},t="Programaci\xf3n orientada a objetos en Dart",l={id:"paradigmas-de-programacion/programacion-orientada-a-objetos/poo-en-dart",title:"Programaci\xf3n orientada a objetos en Dart",description:"Definici\xf3n de una clase e instanciaci\xf3n de una clase",source:"@site/docs/paradigmas-de-programacion/programacion-orientada-a-objetos/poo-en-dart.md",sourceDirName:"paradigmas-de-programacion/programacion-orientada-a-objetos",slug:"/paradigmas-de-programacion/programacion-orientada-a-objetos/poo-en-dart",permalink:"/apuntes/docs/paradigmas-de-programacion/programacion-orientada-a-objetos/poo-en-dart",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_label:"Programaci\xf3n orientada a objetos en Dart",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Introducci\xf3n a Programaci\xf3n Orientada a Objetos (POO)",permalink:"/apuntes/docs/paradigmas-de-programacion/programacion-orientada-a-objetos/introduccion-a-programacion-orientada-a-objetos"}},d={},o=[{value:"Definici\xf3n de una clase e instanciaci\xf3n de una clase",id:"definici\xf3n-de-una-clase-e-instanciaci\xf3n-de-una-clase",level:2},{value:"Variables de instancia",id:"variables-de-instancia",level:2},{value:"M\xe9todos",id:"m\xe9todos",level:2},{value:"M\xe9todos de la instancia",id:"m\xe9todos-de-la-instancia",level:3},{value:"Operadores",id:"operadores",level:3},{value:"Getters y Setters",id:"getters-y-setters",level:3},{value:"M\xe9todos en clases abstractas",id:"m\xe9todos-en-clases-abstractas",level:3},{value:"M\xe9todos y propiedades est\xe1ticos",id:"m\xe9todos-y-propiedades-est\xe1ticos",level:2},{value:"M\xe9todos est\xe1ticos",id:"m\xe9todos-est\xe1ticos",level:3},{value:"Propiedad Estatica",id:"propiedad-estatica",level:3},{value:"Uso de M\xe9todos y Propiedades Est\xe1ticas:",id:"uso-de-m\xe9todos-y-propiedades-est\xe1ticas",level:3},{value:"Ejemplo Practico",id:"ejemplo-practico",level:2},{value:"Descripci\xf3n del Problema",id:"descripci\xf3n-del-problema",level:3},{value:"Unidades a Implementar",id:"unidades-a-implementar",level:3},{value:"Prefijos de Fracciones de Base",id:"prefijos-de-fracciones-de-base",level:3},{value:"Soluci\xf3n del problema",id:"soluci\xf3n-del-problema",level:3},{value:"Modo de uso",id:"modo-de-uso",level:3}];function c(e){const a={admonition:"admonition",annotation:"annotation",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",math:"math",mn:"mn",mo:"mo",mrow:"mrow",mstyle:"mstyle",mtable:"mtable",mtd:"mtd",mtr:"mtr",ol:"ol",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(a.h1,{id:"programaci\xf3n-orientada-a-objetos-en-dart",children:"Programaci\xf3n orientada a objetos en Dart"}),"\n",(0,r.jsx)(a.h2,{id:"definici\xf3n-de-una-clase-e-instanciaci\xf3n-de-una-clase",children:"Definici\xf3n de una clase e instanciaci\xf3n de una clase"}),"\n",(0,r.jsxs)(a.p,{children:["En dart podemos definir una clase con la palabra clave ",(0,r.jsx)(a.code,{children:"class"})," seguido del nombre que se le quiere dar a la clase. Posteriormente esta el cuerpo de la clase que se encierra entre llaves, aqu\xed se declaran sus propiedades, m\xe9todos, getters, setters y constructores. Para poder crear una instancia de la misma clase solo se tiene llamar a un constructor de la clase."]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-dart",children:'// Declaraci\xf3n de la clase\r\nclass Point {\r\n    final int x;\r\n    final int y;\r\n\r\n    // Constructor\r\n    Point(this.x, this.y);\r\n\r\n    // Otro constructor de la clase\r\n    Point.fromJson(Map<String, int> json) {\r\n        x = json[\'x\']; // Accede al valor de la clave "x" dentro del mapa y lo asigna a "x" de la instancia\r\n        y = json[\'y\']; // Accede al valor de la clave "y" dentro del mapa y lo asigna a "y" de la instancia\r\n    }\r\n}\r\n\r\nvoid main() {\r\n    var p1 = Point(2, 5); // Instanciaci\xf3n de la clase\r\n}\n'})}),"\n",(0,r.jsxs)(a.p,{children:["Los nombres de los constructores pueden ser el ",(0,r.jsx)(a.strong,{children:"mismo nombre de la clase"}),' o el nombre de la clase mas "',(0,r.jsx)(a.strong,{children:"."}),'" y un ',(0,r.jsx)(a.strong,{children:"identificador"}),", como si fuera un m\xe9todo. Por ejemplo, el siguiente c\xf3digo crea objetos Point utilizando los constructores Point() y Point.fromJson():"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-dart",children:"var p1 = Point(2, 2);\r\nvar p2 = Point.fromJson({'x': 1, 'y': 2});\n"})}),"\n",(0,r.jsxs)(a.p,{children:["El primer constructor ",(0,r.jsx)(a.code,{children:"Point()"})," pide dos n\xfameros que representan las coordenadas ",(0,r.jsx)(a.strong,{children:"X"})," e ",(0,r.jsx)(a.strong,{children:"Y"})," para poder crear un punto dentro de un espacio bidimensional. Mientras, el constructor ",(0,r.jsx)(a.code,{children:"Point.fromJson()"}),' es capaz de construir un punto a partir de otra estructura "',(0,r.jsx)(a.code,{children:"Map<String, int>"}),'" que contiene, igualmente, coordenadas de un espacio bidimensional.']}),"\n",(0,r.jsx)(a.admonition,{title:"Acerca de los Json",type:"info",children:(0,r.jsxs)(a.p,{children:[(0,r.jsx)(a.strong,{children:"JSON"})," es un formato de texto que se utiliza para el almacenamiento, acceso e intercambio de datos. Es un formato de texto sencillo que se deriva de la sintaxis de JavaScript, pero no tiene como objetivo la creaci\xf3n de programas. Dart para procesar este tipo de dato ofrece las funciones ",(0,r.jsx)(a.code,{children:"jsonDecode()"})," y ",(0,r.jsx)(a.code,{children:"jsonEncode()"})," que vienen con el paquete ",(0,r.jsx)(a.code,{children:"dart:convert"})," y transforma el JSON de texto a un ",(0,r.jsx)(a.code,{children:"Map<dynamic, dynamic>"}),"."]})}),"\n",(0,r.jsxs)(a.p,{children:["Algunas clases proporcionan un ",(0,r.jsx)(a.strong,{children:"constructor constante"})," que se usan para crear una constante en tiempo de compilaci\xf3n. Estos constructores pueden ser llamados simplemente agregando un ",(0,r.jsx)(a.code,{children:"const"})," antes del constructor de la siguiente manera:"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-dart",children:"var p = const ImmutablePoint(2, 2);\n"})}),"\n",(0,r.jsx)(a.admonition,{title:"Acerca de los datos inmutables",type:"info",children:(0,r.jsxs)(a.p,{children:["En el contexto de la programaci\xf3n, la ",(0,r.jsx)(a.strong,{children:"inmutabilidad"})," se refiere a la propiedad de un objeto o variable que no se puede modificar despu\xe9s de su creaci\xf3n. La creaci\xf3n de objeto constante al momento de la compilaci\xf3n ayuda al rendimiento del programa resultante."]})}),"\n",(0,r.jsx)(a.p,{children:"Dentro de un contexto constante, puede omitir la constante antes de un constructor o literal. Por ejemplo, mira este c\xf3digo, que crea un mapa constante:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-dart",children:"// Muchas constantes para declarar un mapa\r\nconst pointAndLine = const {\r\n  'point': const [const ImmutablePoint(0, 0)],\r\n  'line': const [const ImmutablePoint(1, 10), const ImmutablePoint(-2, 11)],\r\n};\n"})}),"\n",(0,r.jsxs)(a.p,{children:["\u200bPuedes omitir todos los usos excepto el primero de la palabra clave ",(0,r.jsx)(a.code,{children:"const"}),":"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-dart",children:"// Puede simplificarse usando un solo const al comienzo de la declaraci\xf3n\r\nconst pointAndLine = {\r\n  'point': [ImmutablePoint(0, 0)],\r\n  'line': [ImmutablePoint(1, 10), ImmutablePoint(-2, 11)],\r\n};\n"})}),"\n",(0,r.jsx)(a.h2,{id:"variables-de-instancia",children:"Variables de instancia"}),"\n",(0,r.jsxs)(a.p,{children:["Las variables de instancia son variables que pertenecen a una clase y se declaran sin la palabra clave ",(0,r.jsx)(a.code,{children:"static"}),". Cada objeto de la clase tiene su propia copia de las variables de instancia. Las variables de instancia se inicializan cuando se crea un objeto de la clase y se pueden acceder a ellas utilizando el objeto."]}),"\n",(0,r.jsx)(a.p,{children:"Asi es como se declaran las variables de instancia:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-dart",children:'class Point {\r\n  double? x; // Declara una variable de tipo double potencialmente nulo llamada "x", iniciada en nulo\r\n  double? y; // Declara "y" inicializada en nulo\r\n  double z = 0; // Declara "z" como un double e inicializa en 0 \r\n}\n'})}),"\n",(0,r.jsxs)(a.p,{children:["Las variables potencialmente nulas no inicializadas o sin un valor especificado se inicializan en ",(0,r.jsx)(a.code,{children:"null"}),". Una variable que no admite un nulo, obligatoriamente deben ser inicializadas con un valor o mediante los constructores de la clase."]}),"\n",(0,r.jsxs)(a.p,{children:["Todas las variables de instancia generan un m\xe9todo ",(0,r.jsx)(a.strong,{children:"getter"})," impl\xedcito. Las variables de instancia no finales y las variables de instancia finales tard\xedas sin inicializadores tambi\xe9n generan un m\xe9todo ",(0,r.jsx)(a.strong,{children:"setter"})," impl\xedcito."]}),"\n",(0,r.jsxs)(a.p,{children:["Los ",(0,r.jsx)(a.strong,{children:"Getters"})," y ",(0,r.jsx)(a.strong,{children:"Setters"})," son m\xe9todos de acceso a los campos/atributos de una clase. Los ",(0,r.jsx)(a.strong,{children:"Getters"})," nos permiten obtener los datos de las variables y los ",(0,r.jsx)(a.strong,{children:"Setters"})," nos permiten asignar o cambiar su valor. Los Getters y Setters se utilizan para acceder y modificar los valores de los atributos de una clase. Los m\xe9todos que permiten acceder al valor de un atributo se denominan ",(0,r.jsx)(a.em,{children:'"getters"'})," y los que fijan el valor de un atributo se denominan ",(0,r.jsx)(a.em,{children:'"setters"'}),"."]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-dart",children:'class Point {\r\n  double? x; // Declara una variable double potencialmente nula llamada X. Se inicializa en null\r\n  double? y; // Declara una variable double potencialmente nula llamada Y. Se inicializa en null\r\n\r\n  // La clase no tiene un constructor definido\r\n}\r\n\r\nvoid main() {\r\n  var p1 = Point(); // Se crea una instancia de Point y se guarda en "p1"\r\n\r\n  print(p1.x); // Se imprime el valor de X por consola, en este caso null\r\n  p1.x = 4; // Se usa el setter impl\xedcito de x para asignarle a este el valor de 4\r\n\r\n  print(p1.x); // Se imprime el valor de X por consola, en este caso 4\r\n  print(p1.y == null) // Imprime si el valor Y es igual a nulo, en este caso es True\r\n}\n'})}),"\n",(0,r.jsxs)(a.p,{children:["Inicializar una variable de instancia no declarada como ",(0,r.jsx)(a.code,{children:"late"})," en el lugar donde se declara establece el valor cuando se crea la instancia, antes de que se ejecute el constructor y su lista de inicializadores. Como resultado, la expresi\xf3n de inicializaci\xf3n (despu\xe9s del ",(0,r.jsx)(a.code,{children:"="}),") de una variable de instancia no declarada como 'late' no puede acceder a 'this', es decir, una propiedad no puede acceder al valor de otra antes de que se cree una instancia de la clase, a no ser que se use el modificador ",(0,r.jsx)(a.code,{children:"late"})," antes de la declaraci\xf3n."]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-dart",children:'double initialX = 1.5;\r\n\r\nclass Point {\r\n  // OK, Puede acceder al valor de "initialX" porque es una variable fuera de la clase\r\n  double? x = initialX;\r\n\r\n  // ERROR, No puede acceder al valor de x ya que no tiene el modificador late\r\n  double? y = this.x;\r\n\r\n  // OK, Puede acceder al valor de x despu\xe9s de la inicializaci\xf3n de la instancia\r\n  late double? z = this.x;\r\n\r\n  // Constructor de la clase\r\n  Point(this.x, this.y);\r\n}\n'})}),"\n",(0,r.jsx)(a.p,{children:"Las variables de instancia pueden ser finales, en cuyo caso deben establecerse exactamente una vez. Inicialice las variables de instancia finales, no tard\xedas, en la declaraci\xf3n, usando un par\xe1metro de constructor o usando la lista de inicializadores de un constructor:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-dart",children:"class ProfileMark {\r\n  // A esta variable se le asignara un valor a traves del constructor y esta permanecer\xe1 constante a lo largo del tiempo\r\n  final String name;\r\n  // Esta variable ya tiene un valor por defecto y es final por lo que no puede ser inicializada en el constructor\r\n  final DateTime start = DateTime.now();\r\n\r\n  // Constructor principal\r\n  ProfileMark(this.name);\r\n\r\n  // Constructor \"unnamed\"\r\n  ProfileMark.unnamed() : name = '';\r\n}\n"})}),"\n",(0,r.jsx)(a.h2,{id:"m\xe9todos",children:"M\xe9todos"}),"\n",(0,r.jsx)(a.p,{children:"Los m\xe9todos son funciones que proporcionan comportamiento a un objeto.\r\n\u200b"}),"\n",(0,r.jsx)(a.h3,{id:"m\xe9todos-de-la-instancia",children:"M\xe9todos de la instancia"}),"\n",(0,r.jsxs)(a.p,{children:["Los m\xe9todos de instancia en objetos pueden acceder a variables de instancia y a ",(0,r.jsx)(a.code,{children:"this"}),". El m\xe9todo ",(0,r.jsx)(a.code,{children:"distanciaTo()"})," del siguiente ejemplo es un m\xe9todo de instancia:"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-dart",children:'import \'dart:math\';\r\n\r\nclass Point {\r\n  final double x;\r\n  final double y;\r\n\r\n  Point(this.x, this.y);\r\n\r\n  double distanceTo(Point other) {\r\n    var dx = x - other.x; // Guarda el valor de X del otro punto en "dx"\r\n    var dy = y - other.y; // Guarda el valor de Y del otro punto en "dy"\r\n    return sqrt(dx * dx + dy * dy); // Retorna la ra\xedz cuadrada de la suma de dx al cuadrado y dy al cuadrado.\r\n  }\r\n}\n'})}),"\n",(0,r.jsxs)(a.p,{children:["En la clase ",(0,r.jsx)(a.code,{children:"Point"})," se declara un m\xe9todo ",(0,r.jsx)(a.code,{children:"distanceTo"})," que recibe otro objeto ",(0,r.jsx)(a.code,{children:"Point"})," como par\xe1metro y retorna un decimal que representara la distancia entre un punto y otro."]}),"\n",(0,r.jsx)(a.h3,{id:"operadores",children:"Operadores"}),"\n",(0,r.jsxs)(a.table,{children:[(0,r.jsx)(a.thead,{children:(0,r.jsxs)(a.tr,{children:[(0,r.jsx)(a.th,{children:"<"}),(0,r.jsx)(a.th,{children:"+"}),(0,r.jsx)(a.th,{children:"|"}),(0,r.jsx)(a.th,{children:">>>"})]})}),(0,r.jsxs)(a.tbody,{children:[(0,r.jsxs)(a.tr,{children:[(0,r.jsx)(a.td,{children:">"}),(0,r.jsx)(a.td,{children:"/"}),(0,r.jsx)(a.td,{children:"^"}),(0,r.jsx)(a.td,{children:"[]"})]}),(0,r.jsxs)(a.tr,{children:[(0,r.jsx)(a.td,{children:"<="}),(0,r.jsx)(a.td,{children:"~/"}),(0,r.jsx)(a.td,{children:"&"}),(0,r.jsx)(a.td,{children:"[]="})]}),(0,r.jsxs)(a.tr,{children:[(0,r.jsx)(a.td,{children:">="}),(0,r.jsx)(a.td,{children:"*"}),(0,r.jsx)(a.td,{children:"<<"}),(0,r.jsx)(a.td,{children:"~"})]}),(0,r.jsxs)(a.tr,{children:[(0,r.jsx)(a.td,{children:"-"}),(0,r.jsx)(a.td,{children:"%"}),(0,r.jsx)(a.td,{children:">>"}),(0,r.jsx)(a.td,{children:"=="})]})]})]}),"\n",(0,r.jsx)(a.admonition,{title:"NOTA",type:"info",children:(0,r.jsxs)(a.p,{children:["Puede que hayas notado que algunos operadores, como ",(0,r.jsx)(a.code,{children:"!="}),", no est\xe1n en la lista de nombres. Esto se debe a que son simplemente ",(0,r.jsx)(a.strong,{children:"az\xfacar sint\xe1ctico"}),", es decir, si no est\xe1 expl\xedcitamente mencionado en la lista, no es porque no exista, sino porque es una forma abreviada o sint\xe1ctica de expresar algo m\xe1s. Por ejemplo ",(0,r.jsx)(a.code,{children:"e1 != e2"})," es equivalente a escribir ",(0,r.jsx)(a.code,{children:"!(e1 == e2)"}),". Esto significa que la comprobaci\xf3n de desigualdad ",(0,r.jsx)(a.code,{children:"!="})," se traduce internamente en la negaci\xf3n de la comprobaci\xf3n de igualdad ",(0,r.jsx)(a.code,{children:"=="}),"."]})}),"\n",(0,r.jsxs)(a.p,{children:["En Dart, los operadores no son simplemente palabras clave, sino que se definen mediante funciones con el nombre ",(0,r.jsx)(a.code,{children:"operator"})," seguido del s\xedmbolo del operador. Aqu\xed hay un ejemplo para ilustrar esto:"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-dart",children:'class Vector {\r\n  final int x, y;\r\n\r\n  Vector(this.x, this.y);\r\n\r\n  // Se sobrescribe la funcionalidad del operador "+" para la clase Vector\r\n  Vector operator +(Vector v) => Vector(x + v.x, y + v.y);\r\n  // Se sobrescribe la funcionalidad del operador "-" para la clase Vector\r\n  Vector operator -(Vector v) => Vector(x - v.x, y - v.y);\r\n\r\n  @override\r\n  bool operator ==(Object other) => // Esto es una funci\xf3n de flecha\r\n      other is Vector && x == other.x && y == other.y;\r\n\r\n  @override\r\n  int get hashCode => Object.hash(x, y);\r\n}\r\n\r\n// Uso de la clase Vector\r\nvoid main() {\r\n  var vector1 = Vector(1, 2);\r\n  var vector2 = Vector(2, 3);\r\n\r\n  // Uso del operador "+"\r\n  var suma = vector1 + vector2; // Se obtiene un tercer vector de X=3 y Y=5 ([3, 5])\r\n}\n'})}),"\n",(0,r.jsxs)(a.p,{children:["En este ejemplo se sobrescribe la funcionalidad de los operadores ",(0,r.jsx)(a.strong,{children:'"+"'}),", ",(0,r.jsx)(a.strong,{children:'"-"'})," y ",(0,r.jsx)(a.strong,{children:'"=="'}),'. Tomando como ejemplo la funci\xf3n de suma, esta se modifica para sumar de una forma "especial" los datos que sean vectores. Lo que hace es tomar otro vector como par\xe1metro.']}),"\n",(0,r.jsxs)(a.p,{children:["En este ejemplo se parte de una clase ",(0,r.jsx)(a.code,{children:"Vector"}),' que representa un vector de dos dimensiones en la vida real. En matem\xe1tica, se sabe que dos vectores pueden sumarse entre si, sin embargo, en Dart, al tratarse de una estructura "desconocida" creada por nosotros, no se sabe como es la suma entre dos vectores, por lo que nosotros tenemos que especificarle a la clase como hacerlo sobrescribiendo la funcionalidad del operador "',(0,r.jsx)(a.code,{children:"+"}),'" u otras operaciones que se tengan en mente. Siguiendo con el ejemplo de la suma, en la clase ',(0,r.jsx)(a.code,{children:"Vector"}),' se especifica que esta funcionalidad toma como par\xe1metro a otro vector para formar un nuevo vector cuyo valor "X" sera igual a la suma (normal) de x1 y x2, y cuya "Y" es igual a la suma de y1 e y2. Ej:']}),"\n",(0,r.jsx)(a.span,{className:"katex-display",children:(0,r.jsxs)(a.span,{className:"katex",children:[(0,r.jsx)(a.span,{className:"katex-mathml",children:(0,r.jsx)(a.math,{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block",children:(0,r.jsxs)(a.semantics,{children:[(0,r.jsx)(a.mrow,{children:(0,r.jsxs)(a.mstyle,{mathsize:"1.44em",children:[(0,r.jsxs)(a.mrow,{children:[(0,r.jsx)(a.mo,{fence:"true",children:"["}),(0,r.jsx)(a.mtable,{rowspacing:"0.16em",columnalign:"center center",columnspacing:"1em",children:(0,r.jsxs)(a.mtr,{children:[(0,r.jsx)(a.mtd,{children:(0,r.jsx)(a.mstyle,{scriptlevel:"0",displaystyle:"false",children:(0,r.jsx)(a.mn,{children:"1"})})}),(0,r.jsx)(a.mtd,{children:(0,r.jsx)(a.mstyle,{scriptlevel:"0",displaystyle:"false",children:(0,r.jsx)(a.mn,{children:"2"})})})]})}),(0,r.jsx)(a.mo,{fence:"true",children:"]"})]}),(0,r.jsx)(a.mo,{children:"+"}),(0,r.jsxs)(a.mrow,{children:[(0,r.jsx)(a.mo,{fence:"true",children:"["}),(0,r.jsx)(a.mtable,{rowspacing:"0.16em",columnalign:"center center",columnspacing:"1em",children:(0,r.jsxs)(a.mtr,{children:[(0,r.jsx)(a.mtd,{children:(0,r.jsx)(a.mstyle,{scriptlevel:"0",displaystyle:"false",children:(0,r.jsx)(a.mn,{children:"2"})})}),(0,r.jsx)(a.mtd,{children:(0,r.jsx)(a.mstyle,{scriptlevel:"0",displaystyle:"false",children:(0,r.jsx)(a.mn,{children:"3"})})})]})}),(0,r.jsx)(a.mo,{fence:"true",children:"]"})]}),(0,r.jsx)(a.mo,{children:"="}),(0,r.jsxs)(a.mrow,{children:[(0,r.jsx)(a.mo,{fence:"true",children:"["}),(0,r.jsx)(a.mtable,{rowspacing:"0.16em",columnalign:"center center",columnspacing:"1em",children:(0,r.jsxs)(a.mtr,{children:[(0,r.jsx)(a.mtd,{children:(0,r.jsx)(a.mstyle,{scriptlevel:"0",displaystyle:"false",children:(0,r.jsx)(a.mn,{children:"3"})})}),(0,r.jsx)(a.mtd,{children:(0,r.jsx)(a.mstyle,{scriptlevel:"0",displaystyle:"false",children:(0,r.jsx)(a.mn,{children:"5"})})})]})}),(0,r.jsx)(a.mo,{fence:"true",children:"]"})]})]})}),(0,r.jsx)(a.annotation,{encoding:"application/x-tex",children:"\\Large \\begin{bmatrix}\n1 & 2\n\\end{bmatrix} + \\begin{bmatrix}\n2 & 3\n\\end{bmatrix} = \\begin{bmatrix}\n3 & 5\n\\end{bmatrix}"})]})})}),(0,r.jsxs)(a.span,{className:"katex-html","aria-hidden":"true",children:[(0,r.jsxs)(a.span,{className:"base",children:[(0,r.jsx)(a.span,{className:"strut",style:{height:"1.8124em",verticalAlign:"-0.504em"}}),(0,r.jsxs)(a.span,{className:"minner sizing reset-size6 size8",children:[(0,r.jsx)(a.span,{className:"mopen sizing reset-size8 size6 delimcenter",style:{top:"-0.11em"},children:(0,r.jsx)(a.span,{className:"delimsizing size2",children:"["})}),(0,r.jsx)(a.span,{className:"mord",children:(0,r.jsxs)(a.span,{className:"mtable",children:[(0,r.jsx)(a.span,{className:"col-align-c",children:(0,r.jsxs)(a.span,{className:"vlist-t vlist-t2",children:[(0,r.jsxs)(a.span,{className:"vlist-r",children:[(0,r.jsx)(a.span,{className:"vlist",style:{height:"0.85em"},children:(0,r.jsxs)(a.span,{style:{top:"-3.45em"},children:[(0,r.jsx)(a.span,{className:"pstrut",style:{height:"3.44em"}}),(0,r.jsx)(a.span,{className:"mord",children:(0,r.jsx)(a.span,{className:"mord",children:"1"})})]})}),(0,r.jsx)(a.span,{className:"vlist-s",children:"\u200b"})]}),(0,r.jsx)(a.span,{className:"vlist-r",children:(0,r.jsx)(a.span,{className:"vlist",style:{height:"0.35em"},children:(0,r.jsx)(a.span,{})})})]})}),(0,r.jsx)(a.span,{className:"arraycolsep",style:{width:"0.5em"}}),(0,r.jsx)(a.span,{className:"arraycolsep",style:{width:"0.5em"}}),(0,r.jsx)(a.span,{className:"col-align-c",children:(0,r.jsxs)(a.span,{className:"vlist-t vlist-t2",children:[(0,r.jsxs)(a.span,{className:"vlist-r",children:[(0,r.jsx)(a.span,{className:"vlist",style:{height:"0.85em"},children:(0,r.jsxs)(a.span,{style:{top:"-3.45em"},children:[(0,r.jsx)(a.span,{className:"pstrut",style:{height:"3.44em"}}),(0,r.jsx)(a.span,{className:"mord",children:(0,r.jsx)(a.span,{className:"mord",children:"2"})})]})}),(0,r.jsx)(a.span,{className:"vlist-s",children:"\u200b"})]}),(0,r.jsx)(a.span,{className:"vlist-r",children:(0,r.jsx)(a.span,{className:"vlist",style:{height:"0.35em"},children:(0,r.jsx)(a.span,{})})})]})})]})}),(0,r.jsx)(a.span,{className:"mclose sizing reset-size8 size6 delimcenter",style:{top:"-0.11em"},children:(0,r.jsx)(a.span,{className:"delimsizing size2",children:"]"})})]}),(0,r.jsx)(a.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,r.jsx)(a.span,{className:"mbin sizing reset-size6 size8",children:"+"}),(0,r.jsx)(a.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,r.jsxs)(a.span,{className:"base",children:[(0,r.jsx)(a.span,{className:"strut",style:{height:"1.8124em",verticalAlign:"-0.504em"}}),(0,r.jsxs)(a.span,{className:"minner sizing reset-size6 size8",children:[(0,r.jsx)(a.span,{className:"mopen sizing reset-size8 size6 delimcenter",style:{top:"-0.11em"},children:(0,r.jsx)(a.span,{className:"delimsizing size2",children:"["})}),(0,r.jsx)(a.span,{className:"mord",children:(0,r.jsxs)(a.span,{className:"mtable",children:[(0,r.jsx)(a.span,{className:"col-align-c",children:(0,r.jsxs)(a.span,{className:"vlist-t vlist-t2",children:[(0,r.jsxs)(a.span,{className:"vlist-r",children:[(0,r.jsx)(a.span,{className:"vlist",style:{height:"0.85em"},children:(0,r.jsxs)(a.span,{style:{top:"-3.45em"},children:[(0,r.jsx)(a.span,{className:"pstrut",style:{height:"3.44em"}}),(0,r.jsx)(a.span,{className:"mord",children:(0,r.jsx)(a.span,{className:"mord",children:"2"})})]})}),(0,r.jsx)(a.span,{className:"vlist-s",children:"\u200b"})]}),(0,r.jsx)(a.span,{className:"vlist-r",children:(0,r.jsx)(a.span,{className:"vlist",style:{height:"0.35em"},children:(0,r.jsx)(a.span,{})})})]})}),(0,r.jsx)(a.span,{className:"arraycolsep",style:{width:"0.5em"}}),(0,r.jsx)(a.span,{className:"arraycolsep",style:{width:"0.5em"}}),(0,r.jsx)(a.span,{className:"col-align-c",children:(0,r.jsxs)(a.span,{className:"vlist-t vlist-t2",children:[(0,r.jsxs)(a.span,{className:"vlist-r",children:[(0,r.jsx)(a.span,{className:"vlist",style:{height:"0.85em"},children:(0,r.jsxs)(a.span,{style:{top:"-3.45em"},children:[(0,r.jsx)(a.span,{className:"pstrut",style:{height:"3.44em"}}),(0,r.jsx)(a.span,{className:"mord",children:(0,r.jsx)(a.span,{className:"mord",children:"3"})})]})}),(0,r.jsx)(a.span,{className:"vlist-s",children:"\u200b"})]}),(0,r.jsx)(a.span,{className:"vlist-r",children:(0,r.jsx)(a.span,{className:"vlist",style:{height:"0.35em"},children:(0,r.jsx)(a.span,{})})})]})})]})}),(0,r.jsx)(a.span,{className:"mclose sizing reset-size8 size6 delimcenter",style:{top:"-0.11em"},children:(0,r.jsx)(a.span,{className:"delimsizing size2",children:"]"})})]}),(0,r.jsx)(a.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.jsx)(a.span,{className:"mrel sizing reset-size6 size8",children:"="}),(0,r.jsx)(a.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,r.jsxs)(a.span,{className:"base",children:[(0,r.jsx)(a.span,{className:"strut",style:{height:"1.8124em",verticalAlign:"-0.504em"}}),(0,r.jsxs)(a.span,{className:"minner sizing reset-size6 size8",children:[(0,r.jsx)(a.span,{className:"mopen sizing reset-size8 size6 delimcenter",style:{top:"-0.11em"},children:(0,r.jsx)(a.span,{className:"delimsizing size2",children:"["})}),(0,r.jsx)(a.span,{className:"mord",children:(0,r.jsxs)(a.span,{className:"mtable",children:[(0,r.jsx)(a.span,{className:"col-align-c",children:(0,r.jsxs)(a.span,{className:"vlist-t vlist-t2",children:[(0,r.jsxs)(a.span,{className:"vlist-r",children:[(0,r.jsx)(a.span,{className:"vlist",style:{height:"0.85em"},children:(0,r.jsxs)(a.span,{style:{top:"-3.45em"},children:[(0,r.jsx)(a.span,{className:"pstrut",style:{height:"3.44em"}}),(0,r.jsx)(a.span,{className:"mord",children:(0,r.jsx)(a.span,{className:"mord",children:"3"})})]})}),(0,r.jsx)(a.span,{className:"vlist-s",children:"\u200b"})]}),(0,r.jsx)(a.span,{className:"vlist-r",children:(0,r.jsx)(a.span,{className:"vlist",style:{height:"0.35em"},children:(0,r.jsx)(a.span,{})})})]})}),(0,r.jsx)(a.span,{className:"arraycolsep",style:{width:"0.5em"}}),(0,r.jsx)(a.span,{className:"arraycolsep",style:{width:"0.5em"}}),(0,r.jsx)(a.span,{className:"col-align-c",children:(0,r.jsxs)(a.span,{className:"vlist-t vlist-t2",children:[(0,r.jsxs)(a.span,{className:"vlist-r",children:[(0,r.jsx)(a.span,{className:"vlist",style:{height:"0.85em"},children:(0,r.jsxs)(a.span,{style:{top:"-3.45em"},children:[(0,r.jsx)(a.span,{className:"pstrut",style:{height:"3.44em"}}),(0,r.jsx)(a.span,{className:"mord",children:(0,r.jsx)(a.span,{className:"mord",children:"5"})})]})}),(0,r.jsx)(a.span,{className:"vlist-s",children:"\u200b"})]}),(0,r.jsx)(a.span,{className:"vlist-r",children:(0,r.jsx)(a.span,{className:"vlist",style:{height:"0.35em"},children:(0,r.jsx)(a.span,{})})})]})})]})}),(0,r.jsx)(a.span,{className:"mclose sizing reset-size8 size6 delimcenter",style:{top:"-0.11em"},children:(0,r.jsx)(a.span,{className:"delimsizing size2",children:"]"})})]})]})]})]})}),"\n",(0,r.jsx)(a.h3,{id:"getters-y-setters",children:"Getters y Setters"}),"\n",(0,r.jsxs)(a.p,{children:["Los getters y setters son m\xe9todos especiales que brindan acceso de lectura y escritura a las propiedades de un objeto. Recuerda que cada variable de instancia tiene un getter impl\xedcito, adem\xe1s de un setter si corresponde. Puede crear propiedades adicionales implementando getters y setters, utilizando las palabras clave ",(0,r.jsx)(a.code,{children:"get"})," y ",(0,r.jsx)(a.code,{children:"set"}),":"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-dart",children:"class Cuadrado {\r\n  double lado;\r\n\r\n  Cuadrado(this.lado);\r\n\r\n  // Propiedad calculada: \xe1rea\r\n  double get area => lado * lado;\r\n\r\n  // Propiedad calculada: per\xedmetro\r\n  double get perimetro => 4 * lado;\r\n}\r\n\r\nvoid main() {\r\n  // Crear una instancia de Cuadrado con un lado de longitud 5\r\n  var cuadrado = Cuadrado(5);\r\n\r\n  // Obtener y mostrar el \xe1rea\r\n  print('\xc1rea del cuadrado: ${cuadrado.area}'); // Imprime 25\r\n\r\n  // Obtener y mostrar el per\xedmetro\r\n  print('Per\xedmetro del cuadrado: ${cuadrado.perimetro}'); // Imprime 20\r\n}\n"})}),"\n",(0,r.jsx)(a.p,{children:"En este ejemplo:"}),"\n",(0,r.jsxs)(a.ol,{children:["\n",(0,r.jsxs)(a.li,{children:["La clase ",(0,r.jsx)(a.code,{children:"Cuadrado"})," tiene una propiedad ",(0,r.jsx)(a.code,{children:"lado"}),", que se inicializa mediante el constructor."]}),"\n",(0,r.jsxs)(a.li,{children:["Se define una propiedad calculada ",(0,r.jsx)(a.code,{children:"area"}),", que devuelve el \xe1rea del cuadrado multiplicando el lado por s\xed mismo."]}),"\n",(0,r.jsxs)(a.li,{children:["Se define otra propiedad calculada ",(0,r.jsx)(a.code,{children:"perimetro"}),", que devuelve el per\xedmetro del cuadrado calculado como 4 veces el lado."]}),"\n",(0,r.jsxs)(a.li,{children:["En la funci\xf3n ",(0,r.jsx)(a.code,{children:"main()"}),", se crea una instancia de Cuadrado con un lado de longitud 5."]}),"\n",(0,r.jsxs)(a.li,{children:["Se obtiene y muestra el \xe1rea del cuadrado usando la propiedad calculada ",(0,r.jsx)(a.code,{children:"area"}),"."]}),"\n",(0,r.jsxs)(a.li,{children:["Se obtiene y muestra el per\xedmetro del cuadrado usando la propiedad calculada ",(0,r.jsx)(a.code,{children:"perimetro"}),"."]}),"\n"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-dart",children:"class Persona {\r\n  String _nombre; // La convenci\xf3n _ indica que es una variable privada\r\n  int _edad;\r\n\r\n  Persona(this._nombre, this._edad);\r\n\r\n  // Getter para obtener el nombre\r\n  String get nombre => _nombre;\r\n\r\n  // Setter para actualizar el nombre\r\n  set nombre(String nuevoNombre) {\r\n    if (nuevoNombre.isNotEmpty) {\r\n      _nombre = nuevoNombre;\r\n    }\r\n  }\r\n\r\n  // Getter para obtener la edad\r\n  int get edad => _edad;\r\n\r\n  // Setter para actualizar la edad\r\n  set edad(int nuevaEdad) {\r\n    if (nuevaEdad >= 0) {\r\n      _edad = nuevaEdad;\r\n    }\r\n  }\r\n}\r\n\r\nvoid main() {\r\n  // Crear una instancia de Persona\r\n  var persona = Persona(\"Juan\", 25);\r\n\r\n  // Obtener y mostrar el nombre y la edad\r\n  print('Nombre: ${persona.nombre}, Edad: ${persona.edad}');\r\n\r\n  // Intentar actualizar el nombre con un valor vac\xedo (no deber\xeda cambiar)\r\n  persona.nombre = '';\r\n  print('Nombre despu\xe9s de intentar actualizar con valor vac\xedo: ${persona.nombre}');\r\n\r\n  // Actualizar la edad\r\n  persona.edad = 30;\r\n\r\n  // Mostrar la nueva edad\r\n  print('Edad despu\xe9s de actualizar: ${persona.edad}');\r\n}\n"})}),"\n",(0,r.jsx)(a.p,{children:"En este ejemplo:"}),"\n",(0,r.jsxs)(a.ol,{children:["\n",(0,r.jsxs)(a.li,{children:["La clase ",(0,r.jsx)(a.code,{children:"Persona"})," tiene propiedades ",(0,r.jsx)(a.code,{children:"_nombre"})," y ",(0,r.jsx)(a.code,{children:"_edad"}),", que est\xe1n marcadas como privadas utilizando la convenci\xf3n _."]}),"\n",(0,r.jsxs)(a.li,{children:["Se definen getters (",(0,r.jsx)(a.code,{children:"nombre"})," y ",(0,r.jsx)(a.code,{children:"edad"}),") para obtener los valores de las propiedades privadas."]}),"\n",(0,r.jsxs)(a.li,{children:["Se definen setters (",(0,r.jsx)(a.code,{children:"nombre"})," y ",(0,r.jsx)(a.code,{children:"edad"}),") que permiten actualizar las propiedades privadas, pero con l\xf3gica adicional. En este caso, se verifica que el nuevo nombre no est\xe9 vac\xedo y que la nueva edad sea un valor no negativo."]}),"\n",(0,r.jsxs)(a.li,{children:["En la funci\xf3n ",(0,r.jsx)(a.code,{children:"main()"}),", se crea una instancia de ",(0,r.jsx)(a.code,{children:"Persona"})," y se muestra el nombre y la edad iniciales."]}),"\n",(0,r.jsx)(a.li,{children:"Se intenta actualizar el nombre con un valor vac\xedo, pero debido a la l\xf3gica en el setter, el nombre no cambia."}),"\n",(0,r.jsx)(a.li,{children:"Se actualiza la edad y se muestra la nueva edad."}),"\n"]}),"\n",(0,r.jsx)(a.h3,{id:"m\xe9todos-en-clases-abstractas",children:"M\xe9todos en clases abstractas"}),"\n",(0,r.jsx)(a.p,{children:"Los m\xe9todos de instancia, getters y setters pueden ser abstractos y definir una interfaz pero dejar su implementaci\xf3n en manos de otras clases. Los m\xe9todos abstractos s\xf3lo pueden existir en clases abstractas o mixins."}),"\n",(0,r.jsx)(a.p,{children:"Para hacer que un m\xe9todo sea abstracto, use un punto y coma (;) en lugar del cuerpo del m\xe9todo:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-dart",children:"// Clase Abstracta\r\nabstract class Doer {\r\n  // Aqu\xed se definen los getters, setters y m\xe9todos abstractos\r\n\r\n  void doSomething(); // Definici\xf3n de un m\xe9todo abstracto\r\n}\r\n\r\nclass EffectiveDoer extends Doer {\r\n  @override\r\n  void doSomething() {\r\n    // Se especifica la funci\xf3n del m\xe9todo\r\n  }\r\n}\n"})}),"\n",(0,r.jsx)(a.h2,{id:"m\xe9todos-y-propiedades-est\xe1ticos",children:"M\xe9todos y propiedades est\xe1ticos"}),"\n",(0,r.jsx)(a.p,{children:"En Dart, los m\xe9todos y propiedades est\xe1ticas pertenecen a la clase en s\xed misma, en lugar de a una instancia espec\xedfica de la clase. Se pueden acceder directamente a trav\xe9s del nombre de la clase, sin necesidad de crear una instancia de esa clase."}),"\n",(0,r.jsx)(a.h3,{id:"m\xe9todos-est\xe1ticos",children:"M\xe9todos est\xe1ticos"}),"\n",(0,r.jsx)(a.p,{children:"Un m\xe9todo est\xe1tico se define usando la palabra clave static y no tiene acceso a las instancias de la clase. Puedes invocar un m\xe9todo est\xe1tico directamente en la clase, sin necesidad de crear un objeto de esa clase. Aqu\xed hay un ejemplo:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-dart",children:'class MiClase {\r\n  static void metodoEstatico() {\r\n    print("Este es un m\xe9todo est\xe1tico.");\r\n  }\r\n}\r\n\r\nvoid main() {\r\n  // Invocar el m\xe9todo est\xe1tico sin crear una instancia de la clase\r\n  MiClase.metodoEstatico(); // Imprime "Este es un m\xe9todo est\xe1tico."\r\n}\n'})}),"\n",(0,r.jsxs)(a.p,{children:["En este ejemplo, ",(0,r.jsx)(a.code,{children:"metodoEstatico"})," es un m\xe9todo est\xe1tico de ",(0,r.jsx)(a.code,{children:"MiClase"}),". Se puede llamar directamente en la clase sin necesidad de crear un objeto ",(0,r.jsx)(a.code,{children:"MiClase"}),"."]}),"\n",(0,r.jsx)(a.h3,{id:"propiedad-estatica",children:"Propiedad Estatica"}),"\n",(0,r.jsx)(a.p,{children:"Una propiedad est\xe1tica es similar a un m\xe9todo est\xe1tico, pero representa un valor que pertenece a la clase en lugar de a una instancia espec\xedfica. Se define utilizando la palabra clave static. Aqu\xed hay un ejemplo:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-dart",children:"class MiClase {\r\n  static int propiedadEstatica = 42;\r\n}\r\n\r\nvoid main() {\r\n  // Acceder a la propiedad est\xe1tica directamente en la clase\r\n  print(MiClase.propiedadEstatica); // Imprime 42\r\n}\n"})}),"\n",(0,r.jsxs)(a.p,{children:["En este ejemplo, ",(0,r.jsx)(a.code,{children:"propiedadEstatica"})," es una propiedad est\xe1tica de ",(0,r.jsx)(a.code,{children:"MiClase"}),". Puedes acceder directamente a la propiedad utilizando el nombre de la clase."]}),"\n",(0,r.jsx)(a.h3,{id:"uso-de-m\xe9todos-y-propiedades-est\xe1ticas",children:"Uso de M\xe9todos y Propiedades Est\xe1ticas:"}),"\n",(0,r.jsxs)(a.ol,{children:["\n",(0,r.jsx)(a.li,{children:"Los m\xe9todos y propiedades est\xe1ticas son \xfatiles cuando se desea tener funcionalidades asociadas a la clase en s\xed misma, y no a instancias espec\xedficas de esa clase."}),"\n",(0,r.jsx)(a.li,{children:"Se accede a los m\xe9todos y propiedades est\xe1ticas directamente a trav\xe9s del nombre de la clase, sin necesidad de crear instancias."}),"\n",(0,r.jsx)(a.li,{children:"Son \xfatiles para situaciones en las que la funcionalidad no depende del estado de una instancia particular, sino que es independiente de las instancias."}),"\n",(0,r.jsxs)(a.li,{children:["No pueden acceder a las variables de instancia ni usar la palabra clave ",(0,r.jsx)(a.code,{children:"this"}),", ya que no est\xe1n asociados a instancias particulares."]}),"\n",(0,r.jsxs)(a.li,{children:["Los m\xe9todos y propiedades est\xe1ticas son declarados utilizando la palabra clave ",(0,r.jsx)(a.code,{children:"static"})," antes de su declaraci\xf3n."]}),"\n"]}),"\n",(0,r.jsx)(a.h2,{id:"ejemplo-practico",children:"Ejemplo Practico"}),"\n",(0,r.jsx)(a.h3,{id:"descripci\xf3n-del-problema",children:"Descripci\xf3n del Problema"}),"\n",(0,r.jsx)(a.p,{children:"En el mundo de la ingenier\xeda y las ciencias, la utilizaci\xf3n de unidades de medida estandarizadas es esencial para garantizar la coherencia y la precisi\xf3n en los c\xe1lculos. En este desaf\xedo, se busca implementar un sistema de unidades internacionales que incluya la capacidad de expresar medidas en diferentes prefijos de fracciones de base."}),"\n",(0,r.jsx)(a.h3,{id:"unidades-a-implementar",children:"Unidades a Implementar"}),"\n",(0,r.jsxs)(a.ol,{children:["\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"Longitud:"})," La unidad base ser\xe1 el ",(0,r.jsx)(a.strong,{children:"metro"}),". Debe ser posible expresar la longitud en metros, cent\xedmetros, mil\xedmetros, kil\xf3metros, etc."]}),"\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"Volumen:"})," Las unidades a implementar ser\xe1n el ",(0,r.jsx)(a.strong,{children:"litro"})," y el ",(0,r.jsx)(a.strong,{children:"metro cubico"}),". Debe ser posible expresar el volumen en litros, mililitros, decilitros, etc. De igual forma para el metro cubico."]}),"\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"\xc1rea:"})," La unidad base ser\xe1 el ",(0,r.jsx)(a.strong,{children:"metro cuadrado"}),". Debe ser posible expresar el \xe1rea en metros cuadrados, cent\xedmetros cuadrados, kil\xf3metros cuadrados, etc."]}),"\n"]}),"\n",(0,r.jsx)(a.h3,{id:"prefijos-de-fracciones-de-base",children:"Prefijos de Fracciones de Base"}),"\n",(0,r.jsx)(a.p,{children:"Se deben implementar los prefijos comunes para expresar fracciones de base, como kilo, hecto, deci, centi, mili, etc. Estos prefijos deben ser aplicables a las unidades de longitud, litro y \xe1rea."}),"\n",(0,r.jsx)(a.h3,{id:"soluci\xf3n-del-problema",children:"Soluci\xf3n del problema"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-bath",metastring:'title="Estructura de carpetas"',children:"\u251c\u2500 area\r\n|  \u2514\u2500 square_meter.dart\r\n\u251c\u2500 longitud\r\n|  \u2514\u2500 meter.dart\r\n\u251c\u2500 volumen\r\n|  \u251c\u2500 cubic_meter.dart\r\n|  \u2514\u2500 liter.dart\r\n\u251c\u2500 international_unit.dart\r\n\u2514\u2500 unit.dart\n"})}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-dart",metastring:'title="unit.dart"',children:"abstract class Unit {\r\n  final double value;\r\n  int get exp => 0;\r\n  String get symbol;\r\n\r\n  Unit(this.value);\r\n\r\n  Unit _createInstance(double value);\r\n\r\n  @override\r\n  bool operator ==(dynamic other) => other is Unit && other.value == value;\r\n\r\n  @override\r\n  int get hashCode => value.hashCode;\r\n}\r\n\n"})}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-dart",metastring:'title="international_unit.dart"',children:"import 'dart:math';\r\n\r\nimport 'package:unidades_de_medida/unit.dart';\r\n\r\nenum BaseFraction { mili, centi, deci, base, deca, hecta, kilo }\r\n\r\nMap<BaseFraction, String> baseFractionPrefix = {\r\n  BaseFraction.kilo: 'k',\r\n  BaseFraction.hecta: 'h',\r\n  BaseFraction.deca: 'da',\r\n  BaseFraction.base: '',\r\n  BaseFraction.deci: 'd',\r\n  BaseFraction.centi: 'c',\r\n  BaseFraction.mili: 'm',\r\n};\r\n\r\nabstract class InternationalUnit extends Unit {\r\n  InternationalUnit(double value) : super(value);\r\n\r\n  double valueIn(BaseFraction fraction) {\r\n    late double result;\r\n    switch (fraction) {\r\n      case BaseFraction.kilo:\r\n        result = value / (1000 * pow(10, this.exp));\r\n        break;\r\n      case BaseFraction.hecta:\r\n        result = value / (100 * pow(10, this.exp));\r\n        break;\r\n      case BaseFraction.deca:\r\n        result = value / (10 * pow(10, this.exp));\r\n        break;\r\n      case BaseFraction.base:\r\n        result = value;\r\n        break;\r\n      case BaseFraction.deci:\r\n        result = value * 10 * pow(10, this.exp);\r\n        break;\r\n      case BaseFraction.centi:\r\n        result = value * 100 * pow(10, this.exp);\r\n        break;\r\n      default:\r\n        result = value * 1000 * pow(10, this.exp);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  static double calculateBase(double number, BaseFraction fraction) {\r\n    late double result;\r\n    switch (fraction) {\r\n      case BaseFraction.kilo:\r\n        result = number * 1000;\r\n        break;\r\n      case BaseFraction.hecta:\r\n        result = number * 100;\r\n        break;\r\n      case BaseFraction.deca:\r\n        result = number * 10;\r\n        break;\r\n      case BaseFraction.base:\r\n        result = number;\r\n        break;\r\n      case BaseFraction.deci:\r\n        result = number / 10;\r\n        break;\r\n      case BaseFraction.centi:\r\n        result = number / 100;\r\n        break;\r\n      default:\r\n        result = number / 1000;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  @override\r\n  String toString() {\r\n    return '$value$symbol';\r\n  }\r\n\r\n  String expressIn(BaseFraction fraction) =>\r\n      '${valueIn(fraction)}${baseFractionPrefix[fraction]!}$symbol';\r\n}\n"})}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-dart",metastring:'title="longitud/meter.dart"',children:"import 'package:unidades_de_medida/area/square_meter.dart';\r\nimport 'package:unidades_de_medida/international_unit.dart';\r\n\r\nclass Meter extends InternationalUnit {\r\n  Meter.kilometer(double medida)\r\n      : super(InternationalUnit.calculateBase(medida, BaseFraction.kilo));\r\n\r\n  Meter.hectometer(double medida)\r\n      : super(InternationalUnit.calculateBase(medida, BaseFraction.hecta));\r\n\r\n  Meter.decameter(double medida)\r\n      : super(InternationalUnit.calculateBase(medida, BaseFraction.deca));\r\n\r\n  Meter.decimeter(double medida)\r\n      : super(InternationalUnit.calculateBase(medida, BaseFraction.deci));\r\n\r\n  Meter.centimeter(double medida)\r\n      : super(InternationalUnit.calculateBase(medida, BaseFraction.centi));\r\n\r\n  Meter.millimeter(double medida)\r\n      : super(InternationalUnit.calculateBase(medida, BaseFraction.mili));\r\n\r\n  Meter(double medida) : super(medida);\r\n\r\n  @override\r\n  String symbol = 'm';\r\n\r\n  Meter operator +(Meter other) => Meter(value + other.value);\r\n  Meter operator -(Meter other) => Meter(value - other.value);\r\n\r\n  dynamic operator *(dynamic other) {\r\n    if (other is num) {\r\n      return Meter(value * other);\r\n    }\r\n    if (other is Meter) {\r\n      return SquareMeter(value * other.value);\r\n    }\r\n    throw \"[ERROR] tipo de dato no soportado\";\r\n  }\r\n\r\n  Meter operator /(dynamic other) => Meter(value / other);\r\n}\n"})}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-dart",metastring:'title="area/square_meter.dart"',children:"import 'package:unidades_de_medida/international_unit.dart';\r\nimport 'package:unidades_de_medida/longitud/meter.dart';\r\nimport 'package:unidades_de_medida/volumen/cubic_meter.dart';\r\n\r\nclass SquareMeter extends InternationalUnit {\r\n  @override\r\n  String symbol = 'm\xb2';\r\n\r\n  @override\r\n  int exp = 2;\r\n\r\n  SquareMeter(super.value);\r\n\r\n  SquareMeter.squareKilometer(double medida)\r\n      : super(InternationalUnit.calculateBase(medida, BaseFraction.kilo));\r\n\r\n  SquareMeter.squareHectometer(double medida)\r\n      : super(InternationalUnit.calculateBase(medida, BaseFraction.hecta));\r\n\r\n  SquareMeter.squareDecameter(double medida)\r\n      : super(InternationalUnit.calculateBase(medida, BaseFraction.deca));\r\n\r\n  SquareMeter.squareDecimeter(double medida)\r\n      : super(InternationalUnit.calculateBase(medida, BaseFraction.deci));\r\n\r\n  SquareMeter.squareCentimeter(double medida)\r\n      : super(InternationalUnit.calculateBase(medida, BaseFraction.centi));\r\n\r\n  SquareMeter.squareMillimeter(double medida)\r\n      : super(InternationalUnit.calculateBase(medida, BaseFraction.mili));\r\n\r\n  SquareMeter operator +(SquareMeter other) => SquareMeter(value + other.value);\r\n  SquareMeter operator -(SquareMeter other) => SquareMeter(value - other.value);\r\n\r\n  dynamic operator *(dynamic other) {\r\n    if (other is num) {\r\n      return SquareMeter(value * other);\r\n    }\r\n    if (other is Meter) {\r\n      return CubicMeter(value * other.value);\r\n    }\r\n    throw \"[ERROR] tipo de dato no soportado\";\r\n  }\r\n}\n"})}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-dart",metastring:'title="volumen/cubic_meter.dart"',children:"import 'package:unidades_de_medida/international_unit.dart';\r\n\r\nimport 'liter.dart';\r\n\r\nclass CubicMeter extends InternationalUnit {\r\n  CubicMeter.cubicKilometer(double medida)\r\n      : super(InternationalUnit.calculateBase(medida, BaseFraction.kilo));\r\n\r\n  CubicMeter.cubicHectometer(double medida)\r\n      : super(InternationalUnit.calculateBase(medida, BaseFraction.hecta));\r\n\r\n  CubicMeter.cubicDecameter(double medida)\r\n      : super(InternationalUnit.calculateBase(medida, BaseFraction.deca));\r\n\r\n  CubicMeter.cubicDecimeter(double medida)\r\n      : super(InternationalUnit.calculateBase(medida, BaseFraction.deci));\r\n\r\n  CubicMeter.cubicCentimeter(double medida)\r\n      : super(InternationalUnit.calculateBase(medida, BaseFraction.centi));\r\n\r\n  CubicMeter.cubicMillimeter(double medida)\r\n      : super(InternationalUnit.calculateBase(medida, BaseFraction.mili));\r\n\r\n  CubicMeter(super.value);\r\n\r\n  @override\r\n  String symbol = 'm\xb3';\r\n\r\n  @override\r\n  int exp = 3;\r\n\r\n  CubicMeter operator +(CubicMeter other) => CubicMeter(value + other.value);\r\n  CubicMeter operator -(CubicMeter other) => CubicMeter(value - other.value);\r\n\r\n  Liter toLiter() {\r\n    return Liter(value * 1000);\r\n  }\r\n}\n"})}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-dart",metastring:'title="volumen/liter.dart"',children:"import 'package:unidades_de_medida/international_unit.dart';\r\n\r\nclass Liter extends InternationalUnit {\r\n  @override\r\n  String symbol = 'l';\r\n\r\n  Liter.kiloliter(double medida)\r\n      : super(InternationalUnit.calculateBase(medida, BaseFraction.kilo));\r\n\r\n  Liter.hectoliter(double medida)\r\n      : super(InternationalUnit.calculateBase(medida, BaseFraction.hecta));\r\n\r\n  Liter.decaliter(double medida)\r\n      : super(InternationalUnit.calculateBase(medida, BaseFraction.deca));\r\n\r\n  Liter.deciliter(double medida)\r\n      : super(InternationalUnit.calculateBase(medida, BaseFraction.deci));\r\n\r\n  Liter.centiliter(double medida)\r\n      : super(InternationalUnit.calculateBase(medida, BaseFraction.centi));\r\n\r\n  Liter.milliliter(double medida)\r\n      : super(InternationalUnit.calculateBase(medida, BaseFraction.mili));\r\n\r\n  Liter(super.value);\r\n\r\n  Liter operator +(Liter other) => Liter(value + other.value);\r\n  Liter operator -(Liter other) => Liter(value - other.value);\r\n}\n"})}),"\n",(0,r.jsx)(a.h3,{id:"modo-de-uso",children:"Modo de uso"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-dart",children:'void main() {\r\n  print(Meter.kilometer(10)); // Imprime "10000.0km"\r\n  print(Meter.millimeter(50).expressIn(BaseFraction.centi)); // Imprime "5.0cm"\r\n  print(Meter.kilometer(1) == Meter(1000)); // Imprime true\r\n  print(Meter(50) * Meter(20)); // Imprime "1000.0m\xb2"\r\n\r\n  SquareMeter testArea = Meter.centimeter(50) * Meter.centimeter(50);\r\n  print(testArea.expressIn(BaseFraction.base)); // Imprime "0.25m\xb2"\r\n\r\n  CubicMeter testVolume = Meter.centimeter(15) * Meter.centimeter(20) * Meter.centimeter(30);\r\n  print(testVolume.toLiter().expressIn(BaseFraction.centi)); // Imprime "900.0cl"\r\n}\n'})})]})}function m(e={}){const{wrapper:a}={...(0,s.a)(),...e.components};return a?(0,r.jsx)(a,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},1151:(e,a,n)=>{n.d(a,{Z:()=>l,a:()=>t});var r=n(7294);const s={},i=r.createContext(s);function t(e){const a=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function l(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),r.createElement(i.Provider,{value:a},e.children)}}}]);