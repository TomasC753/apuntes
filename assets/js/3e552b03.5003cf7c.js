"use strict";(self.webpackChunkapuntes_dart=self.webpackChunkapuntes_dart||[]).push([[6855],{7561:(e,a,o)=>{o.r(a),o.d(a,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>l,toc:()=>d});var r=o(5893),n=o(1151);const s={sidebar_position:1},i="Introducci\xf3n a la Programaci\xf3n",l={id:"introduccion-a-la-programacion/intro-programacion",title:"Introducci\xf3n a la Programaci\xf3n",description:"La programaci\xf3n es el proceso de dise\xf1ar e implementar conjuntos de instrucciones que le dicen a una computadora c\xf3mo realizar una tarea espec\xedfica. Es un medio para comunicarse con las m\xe1quinas y lograr que realicen acciones seg\xfan las directrices establecidas por el programador.",source:"@site/docs/introduccion-a-la-programacion/intro-programacion.md",sourceDirName:"introduccion-a-la-programacion",slug:"/introduccion-a-la-programacion/intro-programacion",permalink:"/apuntes/docs/introduccion-a-la-programacion/intro-programacion",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Introducci\xf3n a Programaci\xf3n",permalink:"/apuntes/docs/category/introducci\xf3n-a-programaci\xf3n"},next:{title:"Lenguajes de Programaci\xf3n",permalink:"/apuntes/docs/introduccion-a-la-programacion/lenguaje-de-programacion"}},c={},d=[{value:"Conceptos Claves",id:"conceptos-claves",level:2},{value:"Objetivos de la programaci\xf3n",id:"objetivos-de-la-programaci\xf3n",level:2},{value:"Funcionamiento de un programa",id:"funcionamiento-de-un-programa",level:2},{value:"Programas y algoritmos",id:"programas-y-algoritmos",level:2},{value:"Compilaci\xf3n",id:"compilaci\xf3n",level:2},{value:"Ciclo de vida del software",id:"ciclo-de-vida-del-software",level:2}];function t(e){const a={a:"a",em:"em",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,n.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(a.h1,{id:"introducci\xf3n-a-la-programaci\xf3n",children:"Introducci\xf3n a la Programaci\xf3n"}),"\n",(0,r.jsx)(a.p,{children:"La programaci\xf3n es el proceso de dise\xf1ar e implementar conjuntos de instrucciones que le dicen a una computadora c\xf3mo realizar una tarea espec\xedfica. Es un medio para comunicarse con las m\xe1quinas y lograr que realicen acciones seg\xfan las directrices establecidas por el programador."}),"\n",(0,r.jsx)(a.p,{children:"En esencia, la programaci\xf3n consiste en escribir c\xf3digo, que son conjuntos de instrucciones escritas en un lenguaje de programaci\xf3n espec\xedfico. Este c\xf3digo luego se traduce a un lenguaje que la computadora puede entender y ejecutar. Los lenguajes de programaci\xf3n pueden variar en complejidad y prop\xf3sito, desde lenguajes de bajo nivel que est\xe1n m\xe1s cerca del lenguaje m\xe1quina hasta lenguajes de alto nivel que son m\xe1s comprensibles y f\xe1ciles de leer para los programadores."}),"\n",(0,r.jsx)(a.p,{children:"La programaci\xf3n es una habilidad vers\xe1til que se aplica en una variedad de campos, desde desarrollo de software y dise\xf1o web hasta inteligencia artificial y an\xe1lisis de datos. Aprender a programar no solo proporciona la capacidad de crear software, sino tambi\xe9n de comprender mejor el funcionamiento interno de las tecnolog\xedas modernas. Con el crecimiento continuo de la tecnolog\xeda, la programaci\xf3n se ha vuelto una habilidad fundamental y valiosa en el mundo actual."}),"\n",(0,r.jsx)(a.h2,{id:"conceptos-claves",children:"Conceptos Claves"}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"Variables:"})," Son contenedores que almacenan informaci\xf3n. Las variables pueden contener distintos tipos de datos, como n\xfameros, cadenas de texto, booleanos, entre otros."]}),"\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"Tipos de Datos:"})," Representan la naturaleza de los datos que una variable puede contener, como enteros, decimales, caracteres, booleanos, listas, entre otros."]}),"\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"Operadores:"})," Son s\xedmbolos o palabras clave que realizan operaciones sobre variables y valores. Ejemplos incluyen operadores aritm\xe9ticos (+, -, *, /), operadores de comparaci\xf3n (==, !=, <, >), y operadores l\xf3gicos (and, or, not)."]}),"\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"Estructuras de Control de Flujo:"})," Permiten modificar el flujo de ejecuci\xf3n del programa. Esto incluye estructuras condicionales (if, else) y bucles (for, while) que permiten realizar acciones repetitivas."]}),"\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"Funciones:"})," Bloques de c\xf3digo reutilizables que realizan una tarea espec\xedfica. Las funciones toman argumentos como entrada, realizan operaciones y pueden devolver un resultado."]}),"\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"Estructuras de Datos:"})," Son formas de organizar y almacenar datos. Ejemplos incluyen listas, arreglos, conjuntos, diccionarios, pilas y colas."]}),"\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"Algoritmos:"})," Son secuencias ordenadas de pasos que describen c\xf3mo realizar una tarea espec\xedfica. Los algoritmos son la base de la programaci\xf3n y se utilizan para resolver problemas."]}),"\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"Manejo de Errores:"})," Involucra la identificaci\xf3n y gesti\xf3n de errores durante la ejecuci\xf3n del programa. Esto se logra mediante el uso de estructuras como try, except."]}),"\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"Comentarios:"})," Anotaciones en el c\xf3digo que no afectan su ejecuci\xf3n, pero proporcionan informaci\xf3n para entender el c\xf3digo. Los comentarios son \xfatiles para la documentaci\xf3n y el trabajo colaborativo."]}),"\n"]}),"\n",(0,r.jsx)(a.h2,{id:"objetivos-de-la-programaci\xf3n",children:"Objetivos de la programaci\xf3n"}),"\n",(0,r.jsx)(a.p,{children:"La programaci\xf3n debe perseguir la obtenci\xf3n de programas de calidad. Para ello se establece una serie de factores que determinan la calidad de un programa. Algunos de los factores de calidad m\xe1s importantes son los siguientes:"}),"\n",(0,r.jsxs)(a.ol,{children:["\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"Eficacia."})," Un programa es correcto si hace lo que debe hacer tal y como se estableci\xf3 en las fases previas a su desarrollo. Para determinar si un programa hace lo que debe, es muy importante especificar claramente qu\xe9 debe hacer el programa antes de su desarrollo y, una vez acabado, compararlo con lo que realmente hace. Al verificar este comportamiento est\xe1 cumpliendo dicho objetivo."]}),"\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"Claridad."})," Es muy importante que el programa sea lo m\xe1s claro y legible posible, para facilitar tanto su desarrollo como su posterior mantenimiento. Al elaborar un programa se debe intentar que su estructura sea sencilla y coherente, as\xed como cuidar el estilo de programaci\xf3n. De esta forma se ve facilitado el trabajo del programador, tanto en la fase de creaci\xf3n como en las fases posteriores de correcci\xf3n de errores, ampliaciones, modificaciones, etc. Fases que pueden ser realizadas incluso por otro programador, con lo cual la claridad es a\xfan m\xe1s necesaria para que otros puedan continuar el trabajo f\xe1cilmente. Algunos programadores llegan incluso a utilizar Arte ASCII para delimitar secciones de c\xf3digo; una pr\xe1ctica com\xfan es realizar aclaraciones en el mismo c\xf3digo fuente utilizando l\xedneas de comentarios. Contrariamente, algunos programadores realizan acciones que tienden a introducir confusi\xf3n para impedir un an\xe1lisis c\xf3modo a otros programadores, recurren al uso de c\xf3digo ofuscado."]}),"\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"Eficiencia."})," Se trata de que el programa, adem\xe1s de realizar aquello para lo que fue creado (es decir, que sea correcto), lo haga gestionando de la mejor forma posible los recursos que utiliza. Normalmente, al hablar de eficiencia de un programa, se suele hacer referencia al tiempo que tarda en realizar la tarea para la que ha sido creado y a la cantidad de memoria que necesita, pero hay otros recursos que tambi\xe9n pueden ser de consideraci\xf3n para mejorar la eficiencia de un programa, dependiendo de su naturaleza (espacio en disco que utiliza, tr\xe1fico en la red que genera, etc.)."]}),"\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"Portabilidad."})," Un programa es portable cuando tiene la capacidad de poder ejecutarse en una plataforma, ya sea hardware o software, diferente a aquella en la que se desarroll\xf3. La portabilidad es una caracter\xedstica muy deseable para un programa, ya que permite, por ejemplo, a un programa que se ha elaborado para el sistema GNU/Linux que tambi\xe9n pueda ejecutarse en la familia de sistemas operativos Windows. Consecuentemente el programa puede llegar a m\xe1s usuarios.\r\nCiclo de vida del software"]}),"\n"]}),"\n",(0,r.jsx)(a.h2,{id:"funcionamiento-de-un-programa",children:"Funcionamiento de un programa"}),"\n",(0,r.jsx)(a.p,{children:"Para crear un programa y que la computadora lo interprete y ejecute, las instrucciones deben escribirse en un lenguaje de programaci\xf3n."}),"\n",(0,r.jsx)(a.p,{children:"El lenguaje entendido por una computadora se conoce como c\xf3digo m\xe1quina. Consiste en secuencias de instrucciones b\xe1sicas que el procesador reconoce, codificadas como cadenas de n\xfameros 1 y 0 (sistema binario). En los primeros tiempos de la computaci\xf3n se programaba directamente en c\xf3digo m\xe1quina. Escribir programas as\xed resultaba demasiado complicado, tambi\xe9n era dif\xedcil entenderlos y mantenerlos una vez escritos. Con el tiempo, se fueron desarrollando herramientas para facilitar el trabajo."}),"\n",(0,r.jsxs)(a.p,{children:["Los primeros cient\xedficos que trabajaron en el \xe1rea decidieron reemplazar las secuencias de unos y ceros por ",(0,r.jsx)(a.a,{href:"https://es.wikipedia.org/wiki/Mnem%C3%B3nico",children:"mnem\xf3nicos"}),", que son abreviaturas en ingl\xe9s de la funci\xf3n que cumple una instrucci\xf3n de procesador. Por ejemplo, para sumar se podr\xeda usar la letra A de la palabra inglesa add (a\xf1adir). Crearon as\xed una familia de lenguajes de mayor nivel, que se conocen como lenguaje ensamblador o simplemente ensamblador (en ingl\xe9s, assembly). Con el tiempo los ensambladores incorporaron facilidades adicionales, pero siempre manteniendo una correspondencia directa con las instrucciones de procesador. A nivel conceptual, entonces, programar en ensamblador es muy similar a hacerlo en lenguaje m\xe1quina, solo que de una forma m\xe1s amigable."]}),"\n",(0,r.jsx)(a.p,{children:"A medida que la complejidad de las tareas que realizaban las computadoras aumentaba, el lenguaje ensamblador fue mostrando limitaciones. Para hacer un programa hab\xeda que conocer en detalle el funcionamiento de la computadora donde se iba a ejecutar, qu\xe9 instrucciones prove\xeda y c\xf3mo emplearlas. A veces las instrucciones eran demasiado b\xe1sicas, por ejemplo pod\xeda haber una para sumar dos n\xfameros pero no para multiplicar, y entonces era necesario programar un algoritmo que realizara la multiplicaci\xf3n con base en instrucciones m\xe1s b\xe1sicas. Otras veces, la forma de emplear las instrucciones era engorrosa. Adem\xe1s, si se usaba otro modelo de computadora, en muchos casos hab\xeda que reescribir el programa con otras instrucciones. El siguiente paso fue crear los lenguajes de alto nivel."}),"\n",(0,r.jsx)(a.p,{children:"Una vez que se termina de escribir un programa, es necesario de alguna forma traducirlo a lenguaje m\xe1quina, que es lo \xfanico que entiende el procesador. Esta tarea es autom\xe1tica, por medio de un programa adicional que toma el c\xf3digo escrito y lo procesa. Hay distintos enfoques para este procesamiento. El enfoque cl\xe1sico se llama compilaci\xf3n: el programa toma el c\xf3digo en un lenguaje y genera c\xf3digo en el otro; al programa traductor se lo llama compilador. En general se habla de compilaci\xf3n y compiladores cuando el lenguaje de origen es de alto nivel; si la traducci\xf3n es desde lenguaje ensamblador, se llama ensamblado y el programa se llama ensamblador (hay que distinguir el lenguaje ensamblador del programa ensamblador; en ingl\xe9s es m\xe1s claro, son assembly language y assembler respectivamente). \u200bGeneralmente existe una fase posterior a la compilaci\xf3n denominada enlace o enlazado (linking en ingl\xe9s). Los programas pueden escribirse en partes separadas y adem\xe1s pueden usar recursos provistos por bibliotecas. El enlazado, realizado por un programa llamado enlazador, combina todos los componentes y as\xed genera un programa ejecutable completo."}),"\n",(0,r.jsx)(a.p,{children:"En algunos lenguajes de programaci\xf3n, puede usarse un enfoque diferente que no requiera compilaci\xf3n y enlace: un programa llamado int\xe9rprete va leyendo el c\xf3digo y realizando en el momento las acciones que har\xeda el programa. Se evita generar c\xf3digo separado y la experiencia es que se est\xe1 ejecutando el c\xf3digo en el lenguaje de alto nivel, a pesar de que el procesador no lo entienda de forma nativa."}),"\n",(0,r.jsx)(a.h2,{id:"programas-y-algoritmos",children:"Programas y algoritmos"}),"\n",(0,r.jsx)(a.p,{children:"Un algoritmo es una secuencia no ambigua, finita y ordenada de instrucciones que han de seguirse para resolver un determinado problema.\u200b Un programa normalmente implementa y contiene uno o m\xe1s algoritmos. Un algoritmo puede expresarse de distintas maneras: en forma gr\xe1fica, como un diagrama de flujo, en forma de c\xf3digo como en pseudoc\xf3digo o un lenguaje de programaci\xf3n, en forma explicativa."}),"\n",(0,r.jsx)(a.p,{children:'Los programas suelen subdividirse en partes menores, llamadas m\xf3dulos, de modo que la complejidad algor\xedtmica de cada una de las partes sea menor que la del programa completo, lo cual ayuda a simplificar el desarrollo del programa. Esta es una pr\xe1ctica muy utilizada y se conoce como "refino progresivo".'}),"\n",(0,r.jsx)(a.h2,{id:"compilaci\xf3n",children:"Compilaci\xf3n"}),"\n",(0,r.jsxs)(a.p,{children:["El programa escrito en un lenguaje de programaci\xf3n de alto nivel (f\xe1cilmente comprensible por el programador) es llamado ",(0,r.jsx)(a.em,{children:(0,r.jsx)(a.strong,{children:"programa fuente"})})," y no se puede ejecutar directamente en una computadora. La opci\xf3n m\xe1s com\xfan es ",(0,r.jsx)(a.strong,{children:"compilar"})," el programa obteniendo un m\xf3dulo objeto, aunque tambi\xe9n, si el lenguaje lo soporta, puede ejecutarse en forma directa pero solo a trav\xe9s de un ",(0,r.jsx)(a.strong,{children:"int\xe9rprete"}),". Algunos lenguajes, tal como BASIC, disponen de ambas formas de ejecuci\xf3n, lo cual facilita la tarea de depuraci\xf3n y prueba del programa."]}),"\n",(0,r.jsxs)(a.p,{children:["El c\xf3digo fuente del programa se debe someter a un proceso de traducci\xf3n para convertirlo a lenguaje m\xe1quina o bien a un c\xf3digo intermedio, generando as\xed un m\xf3dulo denominado ",(0,r.jsx)(a.strong,{children:'"objeto"'}),". A este proceso se le llama ",(0,r.jsx)(a.strong,{children:"compilaci\xf3n"}),"."]}),"\n",(0,r.jsxs)(a.p,{children:["Habitualmente la creaci\xf3n de un programa ejecutable (un t\xedpico.exe para Microsoft Windows o DOS) conlleva dos pasos: el primer paso se llama ",(0,r.jsx)(a.strong,{children:"compilaci\xf3n"})," (propiamente dicho) y traduce el c\xf3digo fuente, escrito en un lenguaje de programaci\xf3n y almacenado en un archivo de texto, a c\xf3digo en bajo nivel (normalmente a c\xf3digo objeto, no directamente a lenguaje m\xe1quina). El segundo paso se llama ",(0,r.jsx)(a.strong,{children:"enlazado"})," en el cual se enlaza el c\xf3digo de bajo nivel generado de todos los ficheros y subprogramas que se han mandado a compilar y se a\xf1ade el c\xf3digo de las funciones necesarias que residen en bibliotecas externas, para que el ejecutable pueda comunicarse directamente con el sistema operativo, traduciendo as\xed finalmente el c\xf3digo objeto a c\xf3digo m\xe1quina, y generando un m\xf3dulo ejecutable."]}),"\n",(0,r.jsx)(a.p,{children:"Estos dos pasos se pueden hacer por separado, almacenando el resultado de la fase de compilaci\xf3n en archivos objetos (un t\xedpico.o para Unix,.obj para MS-Windows y DOS); para enlazarlos en fases posteriores, o crear directamente el ejecutable; con lo que la fase de compilaci\xf3n puede almacenarse de forma temporal. Un programa podr\xeda tener partes escritas en varios lenguajes, por ejemplo, Java, C, C++ y ensamblador, que se podr\xedan compilar de forma independiente y luego combinarse para formar un \xfanico m\xf3dulo ejecutable."}),"\n",(0,r.jsx)(a.h2,{id:"ciclo-de-vida-del-software",children:"Ciclo de vida del software"}),"\n",(0,r.jsxs)(a.p,{children:["El t\xe9rmino ",(0,r.jsx)(a.em,{children:(0,r.jsx)(a.strong,{children:"ciclo de vida del software"})})," describe el desarrollo de software, desde la fase inicial hasta la fase final, incluyendo su estado funcional. El prop\xf3sito es definir las distintas fases intermedias que se requieren para validar el desarrollo de la aplicaci\xf3n, es decir, para garantizar que el software cumpla los requisitos para la aplicaci\xf3n y verificaci\xf3n de los procedimientos de desarrollo: se asegura que los m\xe9todos utilizados son apropiados. Estos m\xe9todos se originan en el hecho de que es muy costoso corregir los errores que se detectan tarde dentro de la fase de implementaci\xf3n (programaci\xf3n propiamente dicha), o peor a\xfan, durante la fase funcional. En el modelo de ciclo de vida se intenta que los errores se detecten lo antes posible y por lo tanto, permite a los desarrolladores concentrarse en la calidad del software, en los plazos de implementaci\xf3n y en los costos asociados. El ciclo de vida b\xe1sico de un software consta de, al menos, los siguientes procedimientos:"]}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsx)(a.li,{children:"An\xe1lisis de requisitos, viabilidad de dise\xf1o y especificaci\xf3n de funciones definidas en lenguaje de programaci\xf3n."}),"\n",(0,r.jsx)(a.li,{children:"An\xe1lisis de la arquitectura en la creaci\xf3n, desarrollo, correcci\xf3n e implementaci\xf3n del sistema."}),"\n",(0,r.jsx)(a.li,{children:"Pruebas en la integraci\xf3n de m\xf3dulos, y subprograma(s) con cada conjunto o subconjunto."}),"\n",(0,r.jsx)(a.li,{children:"Pruebas beta o de validaci\xf3n que garanticen que en el procedimiento de ejecuci\xf3n del software se cumple con todas las especificaciones originales."}),"\n",(0,r.jsx)(a.li,{children:"Mantenimiento de correcci\xf3n de errores y restricciones."}),"\n",(0,r.jsx)(a.li,{children:"Documentaci\xf3n de toda la informaci\xf3n."}),"\n"]})]})}function u(e={}){const{wrapper:a}={...(0,n.a)(),...e.components};return a?(0,r.jsx)(a,{...e,children:(0,r.jsx)(t,{...e})}):t(e)}},1151:(e,a,o)=>{o.d(a,{Z:()=>l,a:()=>i});var r=o(7294);const n={},s=r.createContext(n);function i(e){const a=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function l(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),r.createElement(s.Provider,{value:a},e.children)}}}]);