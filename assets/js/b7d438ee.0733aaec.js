"use strict";(self.webpackChunkapuntes_dart=self.webpackChunkapuntes_dart||[]).push([[8431],{3298:(e,i,s)=>{s.r(i),s.d(i,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>d,toc:()=>l});var n=s(5893),a=s(1151);const r={sidebar_position:3},o="Resumen de Modelos de sistemas distribuidos",d={id:"gestion-de-la-configuracion/resumen-de-modelos-de-sistemas-distribuidos",title:"Resumen de Modelos de sistemas distribuidos",description:"Introducci\xf3n a distribuci\xf3n de servicios",source:"@site/docs/gestion-de-la-configuracion/resumen-de-modelos-de-sistemas-distribuidos.md",sourceDirName:"gestion-de-la-configuracion",slug:"/gestion-de-la-configuracion/resumen-de-modelos-de-sistemas-distribuidos",permalink:"/apuntes/docs/gestion-de-la-configuracion/resumen-de-modelos-de-sistemas-distribuidos",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Resumen de Software Configuration Management",permalink:"/apuntes/docs/gestion-de-la-configuracion/resumen-de-software-configuration-management"},next:{title:"Resumen de Testing",permalink:"/apuntes/docs/gestion-de-la-configuracion/resumen-de-testing"}},c={},l=[{value:"Introducci\xf3n a distribuci\xf3n de servicios",id:"introducci\xf3n-a-distribuci\xf3n-de-servicios",level:2},{value:"\xbfQu\xe9 es este tipo de modelo?",id:"qu\xe9-es-este-tipo-de-modelo",level:3},{value:"Tipos de sistemas",id:"tipos-de-sistemas",level:3},{value:"\xbfQu\xe9 es la escalabilidad?",id:"qu\xe9-es-la-escalabilidad",level:3},{value:"Dimensiones de escalabilidad en un sistema distribuido",id:"dimensiones-de-escalabilidad-en-un-sistema-distribuido",level:3},{value:"Crecimiento vertical",id:"crecimiento-vertical",level:4},{value:"Crecimiento horizontal",id:"crecimiento-horizontal",level:4},{value:"Microservicios",id:"microservicios",level:2},{value:"La arquitectura de los microservicios",id:"la-arquitectura-de-los-microservicios",level:3},{value:"\xbfC\xf3mo utilizar los microservicios?",id:"c\xf3mo-utilizar-los-microservicios",level:3},{value:"Caracter\xedsticas de los microservicios en distintos lenguajes",id:"caracter\xedsticas-de-los-microservicios-en-distintos-lenguajes",level:3}];function t(e){const i={admonition:"admonition",h1:"h1",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",mermaid:"mermaid",ol:"ol",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(i.h1,{id:"resumen-de-modelos-de-sistemas-distribuidos",children:"Resumen de Modelos de sistemas distribuidos"}),"\n",(0,n.jsx)(i.h2,{id:"introducci\xf3n-a-distribuci\xf3n-de-servicios",children:"Introducci\xf3n a distribuci\xf3n de servicios"}),"\n",(0,n.jsx)(i.h3,{id:"qu\xe9-es-este-tipo-de-modelo",children:"\xbfQu\xe9 es este tipo de modelo?"}),"\n",(0,n.jsx)(i.p,{children:"Los sistemas distribuidos son aquellos en los cuales los componentes de hardware y de software est\xe1n ubicados en computadoras de una red y en los cuales las acciones se comunican y coordinan solamente por medio de mensajes."}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.strong,{children:"Caracter\xedsticas"})}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:["Colecci\xf3n de elementos de computaci\xf3n aut\xf3nomos.","\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"Constan de toda clase de nodos, desde computadoras de alto rendimiento a peque\xf1os dispositivos."}),"\n",(0,n.jsx)(i.li,{children:"Se programan para alcanzar objetivos comunes, gracias al intercambio de mensajes entre ellos."}),"\n",(0,n.jsx)(i.li,{children:"Como consecuencia, no hay un reloj com\xfan"}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(i.li,{children:["Sistema coherente \xfanico. Transparencia.","\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:["Vista de sistema \xfanico a transparente al usuario fina","\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"No se deber\xeda saber en qu\xe9 nodo est\xe1 ejecutando una tarea"}),"\n",(0,n.jsx)(i.li,{children:"No deber\xeda importar d\xf3nde se almacenen los datos"}),"\n",(0,n.jsx)(i.li,{children:"No deber\xeda importar si el sistema r\xe9plica datos para mejorar el rendimiento."}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(i.li,{children:["Conjunto de procesadores conectados por una red.","\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"Sin memoria compartida."}),"\n",(0,n.jsx)(i.li,{children:"Sistema d\xe9bilmente acoplado."}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(i.li,{children:"No existe un reloj com\xfan."}),"\n",(0,n.jsx)(i.li,{children:"Dispositivos de E/S asociados a cada procesador."}),"\n",(0,n.jsx)(i.li,{children:"Fallos independientes de componentes del SD."}),"\n",(0,n.jsx)(i.li,{children:"Car\xe1cter heterog\xe9neo."}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(i.li,{children:["Middleware","\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"Los SD se organizan como una capa de software que es l\xf3gicamente separada entre una capa de alto nivel que consta de usuarios y aplicaciones y una capa subyacente formada por sistemas operativos y recursos b\xe1sicos de comunicaci\xf3n."}),"\n",(0,n.jsx)(i.li,{children:"Soporte a computadoras y redes heterog\xe9neas."}),"\n",(0,n.jsx)(i.li,{children:"Vista de un sistema \xfanico."}),"\n",(0,n.jsx)(i.li,{children:"Un middleware a un SD es lo mismo que un SO a un computador: un gestor de recursos."}),"\n",(0,n.jsx)(i.li,{children:"Para que sus aplicaciones compartan y desplieguen los recursos a trav\xe9s de una red."}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(i.li,{children:["Otros servicios:","\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"Comunicaci\xf3n entre aplicaciones."}),"\n",(0,n.jsx)(i.li,{children:"Servicios de seguridad."}),"\n",(0,n.jsx)(i.li,{children:"Servicios de contabilidad."}),"\n",(0,n.jsx)(i.li,{children:"Enmascaramiento y recuperaci\xf3n de errores."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(i.mermaid,{value:"---\r\ntitle: Modelo Cliente-Servidor\r\n---\r\nflowchart LR\r\n    \r\n    client1[[Cliente]]\r\n    client2[[Cliente]]\r\n    client3[[Cliente]]\r\n\r\n    db[(Bases de datos)]\r\n    trans[Transacciones]\r\n    ser[[Servicios externos]]\r\n\r\n    subgraph webService[Servicio Web]\r\n        PC1[[fas:fa-server Servidor]]\r\n        PC2[[Servidor]]\r\n        PC3[[Servidor]]\r\n        PC4[[Servidor]]\r\n        PC1<--\x3ePC2<--\x3ePC3<--\x3ePC4\r\n        PC4<--\x3ePC1\r\n    end\r\n\r\n    client1<--\x3e|Informaci\xf3n| webService\r\n    client2<--\x3e|Informaci\xf3n| webService\r\n    client3<--\x3e|Informaci\xf3n| webService\r\n\r\n    webService<--\x3e|Datos| db\r\n    webService<--\x3etrans\r\n    db<--\x3eser"}),"\n",(0,n.jsx)("br",{}),"\n",(0,n.jsx)(i.admonition,{type:"info",children:(0,n.jsxs)(i.p,{children:["Un ",(0,n.jsx)(i.strong,{children:"middleware"})," (En sistemas distribuidos) es un software que facilita la comunicaci\xf3n y la integraci\xf3n entre diferentes aplicaciones, componentes y recursos en un sistema distribuido."]})}),"\n",(0,n.jsx)(i.admonition,{type:"info",children:(0,n.jsxs)(i.p,{children:["Un ",(0,n.jsx)(i.strong,{children:"middleware"})," en el desarrollo de una aplicaci\xf3n en la gesti\xf3n de rutas es un software que se encarga de interceptar y procesar las peticiones ",(0,n.jsx)(i.strong,{children:"HTTP"})," que llegan a la aplicaci\xf3n, y de enviar las respuestas adecuadas seg\xfan la l\xf3gica de negocio. El ",(0,n.jsx)(i.strong,{children:"middleware"})," puede realizar diferentes funciones, como verificar la ",(0,n.jsx)(i.strong,{children:"autenticaci\xf3n"})," y autorizaci\xf3n del usuario, ",(0,n.jsx)(i.strong,{children:"validar los datos"})," de entrada, ",(0,n.jsx)(i.strong,{children:"aplicar reglas de negocio"}),", ",(0,n.jsx)(i.strong,{children:"manejar errores"}),", ",(0,n.jsx)(i.strong,{children:"registrar eventos"}),", etc."]})}),"\n",(0,n.jsx)("br",{}),"\n",(0,n.jsxs)(i.table,{children:[(0,n.jsx)(i.thead,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.th,{children:"Ventajas"}),(0,n.jsx)(i.th,{children:"Desventajas"})]})}),(0,n.jsxs)(i.tbody,{children:[(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"\u2022 Econom\xeda: buena relaci\xf3n rendimiento/costo."}),(0,n.jsx)(i.td,{children:"\u2022 Necesidad de un nuevo tipo de software mas complejo y cuyo modelo no esta estandarizado"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"\u2022 Avances en tecnolog\xeda de microprocesadores y redes de \xe1rea local."}),(0,n.jsx)(i.td,{children:"\u2022 La red de interconexi\xf3n produce nuevos problemas: Perdida de informaci\xf3n y latencia"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"\u2022 Alto rendimiento: procesamiento paralelo."}),(0,n.jsx)(i.td,{children:"\u2022 Seguridad y confidencialidad."})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"\u2022 Soporte de aplicaciones inherentemente distribuidas. Por ejemplo: empresa distribuida geogr\xe1ficamente."}),(0,n.jsx)(i.td,{children:"\u2022 Definici\xf3n alternativa de SD."})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"\u2022 Capacidad de crecimiento: escalabilidad."}),(0,n.jsx)(i.td,{})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"\u2022 Capacidad de crecimiento: escalabilidad."}),(0,n.jsx)(i.td,{})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"\u2022 Car\xe1cter abierto y heterog\xe9neo."}),(0,n.jsx)(i.td,{})]})]})]}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.strong,{children:"Objetivos"})}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:["Transparencia","\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"Ocultar qu\xe9 procesos y recursos est\xe1n f\xedsicamente distribuidos a trav\xe9s de m\xfaltiples computadoras."}),"\n",(0,n.jsx)(i.li,{children:"Un sistema es transparente si se presenta como una sola computadora."}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Rendimiento"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"Rendimiento para un servicio multi-usuario."}),"\n",(0,n.jsx)(i.li,{children:"Rendimiento para la ejecuci\xf3n paralela de aplicaciones."}),"\n",(0,n.jsx)(i.li,{children:"Factores: uso de esquemas cach\xe9."}),"\n",(0,n.jsxs)(i.li,{children:["Intentar que muchos accesos se hagan localmente.","\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"Usos de esquema de replicaci\xf3n."}),"\n",(0,n.jsxs)(i.li,{children:["Reparto de carga entre componentes replicados.","\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"En ambos casos: coste de mantener la coherencia."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Capacidad de crecimiento"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:'Dise\xf1o de un SD debe evitar "cuellos de botella".'}),"\n",(0,n.jsxs)(i.li,{children:["Estrategias:","\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"Reparto de estructuras de datos entre varios nodos."}),"\n",(0,n.jsx)(i.li,{children:"Replicaci\xf3n y cach\xe9."}),"\n",(0,n.jsx)(i.li,{children:"Realizaci\xf3n de parte del procesamiento en los nodos cliente"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Car\xe1cter abierto"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"SD abierto: servicios, protocolos, etc. Publicados y est\xe1ndares."}),"\n",(0,n.jsx)(i.li,{children:"Facilita la interacci\xf3n con otros sistemas abiertos."}),"\n",(0,n.jsx)(i.li,{children:"Posibilita la migraci\xf3n de aplicaciones desde otros SD abiertos."}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(i.li,{children:["Flexibilidad para cambiar y extender el SD.","\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"Esconde heterogeneidad de HW, SO, lenguajes."}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Fiabilidad"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"Te\xf3ricamente: OR-l\xf3gico de sus componentes."}),"\n",(0,n.jsx)(i.li,{children:"Sin embargo, a veces: AND-l\xf3gico de varios componentes."}),"\n",(0,n.jsx)(i.li,{children:"Evitar componentes cr\xedticos (punto \xfanico de fallo)."}),"\n",(0,n.jsxs)(i.li,{children:["Uso de replicaci\xf3n activa / pasiva:","\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"Mantenimiento de coherencia entre r\xe9plicas."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(i.h3,{id:"tipos-de-sistemas",children:"Tipos de sistemas"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.strong,{children:"Tipos de arquitecturas"})}),"\n",(0,n.jsxs)(i.table,{children:[(0,n.jsx)(i.thead,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.th,{children:"Arquitectura"}),(0,n.jsx)(i.th,{children:"Entidades"}),(0,n.jsx)(i.th,{children:"Descripci\xf3n"}),(0,n.jsx)(i.th,{children:"Ventajas"}),(0,n.jsx)(i.th,{children:"Desventajas"})]})}),(0,n.jsxs)(i.tbody,{children:[(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"Cliente-Servidor"}),(0,n.jsxs)(i.td,{children:["\u2022 Servidor",(0,n.jsx)("br",{}),"\u2022Cliente"]}),(0,n.jsxs)(i.td,{children:["\u2022 Los clientes env\xedan solicitudes al servidor para obtener recursos o servicios.",(0,n.jsx)("br",{})," \u2022 El servidor gestiona recursos y responde a las solicitudes de los clientes.",(0,n.jsx)("br",{})," \u2022 Com\xfanmente utilizado en aplicaciones web, servicios en la nube y bases de datos."]}),(0,n.jsxs)(i.td,{children:["\u2022 Centralizaci\xf3n facilita la gesti\xf3n y seguridad de los recursos.",(0,n.jsx)("br",{})," \u2022 Escalabilidad y control mejorados.",(0,n.jsx)("br",{})," \u2022 Mayor estabilidad y disponibilidad del servicio."]}),(0,n.jsxs)(i.td,{children:["\u2022 Puede haber cuellos de botella si el servidor se sobrecarga.",(0,n.jsx)("br",{})," \u2022 Puede requerir un alto costo de infraestructura y mantenimiento.",(0,n.jsx)("br",{})," \u2022 Puede tener problemas de escalabilidad si hay un aumento repentino en la demanda."]})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"Editor-Subscriptor"}),(0,n.jsxs)(i.td,{children:["\u2022 Editor",(0,n.jsx)("br",{}),"\u2022Subscriptor"]}),(0,n.jsxs)(i.td,{children:["\u2022 Los editores crean y actualizan contenido que se distribuye a los subscriptores interesados.",(0,n.jsx)("br",{})," \u2022 Los subscriptores reciben actualizaciones en funci\xf3n de sus intereses.",(0,n.jsx)("br",{})," \u2022 Utilizado en sistemas de noticias, redes sociales y difusi\xf3n de datos en tiempo real."]}),(0,n.jsxs)(i.td,{children:["\u2022 Distribuci\xf3n eficiente de informaci\xf3n personalizada a un p\xfablico interesado.",(0,n.jsx)("br",{})," \u2022 Escalabilidad para la difusi\xf3n de contenido a gran escala.",(0,n.jsx)("br",{})," \u2022 Reducci\xf3n de la carga en los editores en comparaci\xf3n con un modelo Cliente-Servidor."]}),(0,n.jsxs)(i.td,{children:["\u2022 Requiere una infraestructura m\xe1s compleja para gestionar las suscripciones y distribuir contenido.",(0,n.jsx)("br",{})," - Mayor complejidad en la l\xf3gica de suscripciones y actualizaciones.",(0,n.jsx)("br",{})," \u2022 Puede tener problemas de privacidad si no se gestionan adecuadamente los datos del usuario."]})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"Peer-to-peer (p2p)"}),(0,n.jsx)(i.td,{children:"\u2022 Pares"}),(0,n.jsxs)(i.td,{children:["\u2022 Cada par (peer) puede actuar como cliente y servidor al mismo tiempo.",(0,n.jsx)("br",{})," \u2022 Los pares colaboran directamente para compartir recursos o informaci\xf3n sin un servidor central.",(0,n.jsx)("br",{})," \u2022 Com\xfan en aplicaciones de intercambio de archivos, redes descentralizadas y criptomonedas."]}),(0,n.jsxs)(i.td,{children:["\u2022 Descentralizaci\xf3n y resistencia a la censura.",(0,n.jsx)("br",{})," \u2022 Menor dependencia de un servidor central.",(0,n.jsx)("br",{})," \u2022 Eficiente distribuci\xf3n de recursos en redes de pares."]}),(0,n.jsxs)(i.td,{children:["\u2022 Puede haber problemas de confiabilidad debido a la variabilidad de la disponibilidad de los pares.",(0,n.jsx)("br",{})," \u2022 La escalabilidad puede ser un desaf\xedo en redes grandes.",(0,n.jsx)("br",{})," \u2022 Mayor complejidad en la gesti\xf3n de la seguridad y la privacidad."]})]})]})]}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.strong,{children:"Tipos de sistemas distribuidos"})}),"\n",(0,n.jsxs)(i.ol,{children:["\n",(0,n.jsxs)(i.li,{children:["Sistemas computacionales","\n",(0,n.jsxs)(i.ol,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Distribuido tipo Cluster:"})," Estos sistemas consisten en un conjunto de computadoras interconectadas que trabajan en conjunto como una sola unidad para realizar tareas espec\xedficas. Los cl\xfasteres se utilizan com\xfanmente para mejorar el rendimiento y la disponibilidad de aplicaciones, ya que si una m\xe1quina falla, las dem\xe1s pueden continuar funcionando. Cada cl\xfaster consta de una colecci\xf3n de nodos de c\xf3mputo controlados, y se accede a ellos mediante un solo maestro."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Distribuido tipo Grid:"})," Los sistemas distribuidos tipo grid son una infraestructura de c\xf3mputo que conecta y coordina recursos inform\xe1ticos geogr\xe1ficamente dispersos. Estos sistemas constan de varias capas:","\n",(0,n.jsxs)(i.ol,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Capa de Fabricaci\xf3n:"})," Proporciona interfaces para recursos locales ubicados en un sitio espec\xedfico. Suele ofrecer funciones para consultar el estado y las capacidades de un recurso."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Capa de Conectividad:"})," Incluye protocolos de comunicaci\xf3n que respaldan transacciones que utilizan m\xfaltiples recursos. Facilita la comunicaci\xf3n y la coordinaci\xf3n entre los recursos distribuidos."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Capa de Recursos:"})," Administra la gesti\xf3n de recursos individuales, utilizando funciones de la capa de conectividad y fabricaci\xf3n para acceder a estos recursos."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Capa Colectiva:"})," Se encarga de manejar el acceso a m\xfaltiples recursos. A diferencia de las capas anteriores, esta capa utiliza un conjunto est\xe1ndar de protocolos relativamente peque\xf1o para coordinar las operaciones de acceso a recursos distribuidos."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Capa de Aplicaciones:"})," Las aplicaciones que operan dentro de una organizaci\xf3n virtual aprovechan el sistema de c\xf3mputo basado en grid para ejecutar tareas de manera distribuida y escalable."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(i.li,{children:["Sistemas distribuidos de informaci\xf3n","\n",(0,n.jsxs)(i.ol,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Sistemas de Procesamiento de Transacciones:"})," Estos sistemas se utilizan para gestionar transacciones comerciales y financieras en entornos distribuidos. Permiten el registro, seguimiento y procesamiento de transacciones en tiempo real, garantizando la integridad de los datos y la consistencia de la informaci\xf3n en sistemas distribuidos."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Integraci\xf3n de Aplicaciones Empresariales:"})," La integraci\xf3n de aplicaciones empresariales se refiere a la interconexi\xf3n de diferentes aplicaciones utilizadas en una organizaci\xf3n para facilitar el intercambio de datos y la comunicaci\xf3n entre ellas. Estos sistemas permiten a las empresas optimizar procesos, mejorar la eficiencia y la toma de decisiones al garantizar que las aplicaciones puedan trabajar juntas de manera eficiente."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Sistemas Distribuidos de Informaci\xf3n:"})," Este tipo de sistemas se centra en la gesti\xf3n y distribuci\xf3n de informaci\xf3n en entornos distribuidos. Su objetivo es proporcionar acceso a datos y recursos de informaci\xf3n de manera eficiente y confiable en redes dispersas geogr\xe1ficamente. Los sistemas distribuidos de informaci\xf3n pueden abordar desaf\xedos como el almacenamiento distribuido, la b\xfasqueda de datos, la replicaci\xf3n de informaci\xf3n y la seguridad de la informaci\xf3n en contextos empresariales y cient\xedficos, entre otros"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(i.h3,{id:"qu\xe9-es-la-escalabilidad",children:"\xbfQu\xe9 es la escalabilidad?"}),"\n",(0,n.jsx)(i.p,{children:"La escalabilidad es la propiedad deseable de un sistema, una red o un proceso, que indica su habilidad para reaccionar y adaptarse sin perder calidad, o bien manejar el crecimiento continuo de trabajo de manera fluida, o bien para estar preparado para hacerse m\xe1s grande sin perder calidad en los servicios ofrecidos."}),"\n",(0,n.jsx)(i.p,{children:"Existen distintas herramientas para trabajar o generar escalabilidad:"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"Uso de software eficiente en tiempo y espacio."}),"\n",(0,n.jsxs)(i.li,{children:["Patrones de dise\xf1o y de c\xf3digo para manejar eficientemente conexiones, ",(0,n.jsx)(i.strong,{children:"threads"}),", etc."]}),"\n",(0,n.jsx)(i.li,{children:"Uso de cach\xe9s, consistencia eventual, replicaci\xf3n y balanceo de carga"}),"\n"]}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.strong,{children:"Tipos de escalabilidad"})}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Respecto a su tama\xf1o:"})," Significa agregar recursos y usuarios f\xe1cilmente."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Respecto a su ubicaci\xf3n:"})," Indica que los usuarios y los recursos pueden estar muy lejos entre s\xed."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Respecto a la administraci\xf3n:"})," Esto significa que debe ser f\xe1cil de usar y manejar sin importar cuantas organizaciones compartan el mismo sistema distribuido."]}),"\n"]}),"\n",(0,n.jsx)(i.h3,{id:"dimensiones-de-escalabilidad-en-un-sistema-distribuido",children:"Dimensiones de escalabilidad en un sistema distribuido"}),"\n",(0,n.jsx)(i.h4,{id:"crecimiento-vertical",children:"Crecimiento vertical"}),"\n",(0,n.jsx)(i.p,{children:"Ocurre cuando se agregan m\xe1s recursos a un nodo de la red. Escalar hacia arriba viene a significar una migraci\xf3n de todo el sistema a un nuevo hardware m\xe1s potente y eficaz que el actual."}),"\n",(0,n.jsx)(i.admonition,{type:"warning",children:(0,n.jsx)(i.p,{children:"Este modelo de escalabilidad tiene un aspecto negativo. Al aumentar la potencia con base en ampliaciones de hardware, llegar\xe1 un momento que existir\xe1 alg\xfan tipo de limitaci\xf3n hardware. Adem\xe1s, a medida que se invierte en hardware de muy altas prestaciones, los costos se disparan tanto de forma temporal como econ\xf3micos."})}),"\n",(0,n.jsx)(i.h4,{id:"crecimiento-horizontal",children:"Crecimiento horizontal"}),"\n",(0,n.jsx)(i.p,{children:"Sucede cuando se a\xf1ade un nodo en la red. La escalabilidad horizontal consiste en potenciar el rendimiento del sistema desde un aspecto de mejora global, a diferencia de aumentar la potencia de una \xfanica parte del mismo. Este tipo de escalabilidad se basa en la posibilidad de modular su funcionalidad. Por ello suele estar conformado por una agrupaci\xf3n de equipos que dan soporte a la funcionalidad completa. Normalmente, en una escalabilidad horizontal se a\xf1aden equipos para dar m\xe1s potencia a la red de trabajo"}),"\n",(0,n.jsx)(i.admonition,{type:"info",children:(0,n.jsx)(i.p,{children:"Si se aplica un modelo de escalabilidad basado en la horizontalidad, no existen limitaciones de crecimiento a priori"})}),"\n",(0,n.jsx)("br",{}),"\n",(0,n.jsx)(i.admonition,{type:"warning",children:(0,n.jsx)(i.p,{children:"Este modelo de escalabilidad supone una gran modificaci\xf3n en el dise\xf1o, lo que conlleva a un gran trabajo de dise\xf1o y re-implantaci\xf3n."})}),"\n",(0,n.jsx)(i.p,{children:"Dentro de la escalabilidad existe un concepto importante por la trascendencia que tiene la gesti\xf3n de los recursos a la hora de compartir y distribuir la carga de trabajo de los mismos en ambas direcciones tanto horizontal como vertical; por esta raz\xf3n es fundamental conocer sobre el balance de carga."}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.strong,{children:"Balanceador de carga"})}),"\n",(0,n.jsx)(i.p,{children:"Se entiende este concepto, como la t\xe9cnica usada para dividir el trabajo a compartir entre varios procesos, ordenadores, u otros recursos. Para evitar los cuellos de botella, el balance de la carga de trabajo se reparte de forma equitativa a trav\xe9s de un algoritmo que estudia las peticiones del sistema y las redirecciona a la mejor opci\xf3n."}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.strong,{children:"Balance de carga por hardware"})}),"\n",(0,n.jsx)(i.p,{children:"Presenta las siguientes caracter\xedsticas:"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"A partir de un algoritmo (Round Robin, LRU), examina las peticiones HTTP entrantes y selecciona el m\xe1s apropiado entre los distintos clones del sistema."}),"\n",(0,n.jsx)(i.li,{children:"La selecci\xf3n del clon del sistema est\xe1 basada en el algoritmo de sustituci\xf3n y es aleatoria."}),"\n",(0,n.jsx)(i.li,{children:"Este \xfaltimo punto provoca problemas en el dise\xf1o, ya que no garantiza que si un usuario realiza varias peticiones sean atendidas por el mismo clon del sistema. Por lo tanto, no hay mantenimiento de la sesi\xf3n del usuario en el servidor y condiciona el dise\xf1o."}),"\n",(0,n.jsx)(i.li,{children:"La sesi\xf3n debe de ser mantenida por el desarrollador."}),"\n",(0,n.jsx)(i.li,{children:"Al ser un proceso hardware, es muy r\xe1pido."}),"\n"]}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.strong,{children:"Balance de carga por software"})}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"Examinan el paquete con respecto al protocolo HTTP para garantizar el mantenimiento de la sesi\xf3n de usuario."}),"\n",(0,n.jsx)(i.li,{children:"Distintas peticiones del mismo usuario son servidas por el mismo clon del servidor."}),"\n",(0,n.jsx)(i.li,{children:"M\xe1s lentos que los balanceadores hardware."}),"\n",(0,n.jsx)(i.li,{children:"Normalmente son soluciones baratas."}),"\n"]}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h2,{id:"microservicios",children:"Microservicios"}),"\n",(0,n.jsx)(i.p,{children:"La arquitectura de microservicios es un m\xe9todo de desarrollo de aplicaciones software que funciona como un conjunto de peque\xf1os servicios que se ejecutan de manera independiente y aut\xf3noma, proporcionando una funcionalidad de negocio completa. En ella, cada microservicio es un c\xf3digo que puede estar en un lenguaje de programaci\xf3n diferente, y que desempe\xf1a una funci\xf3n espec\xedfica. Los microservicios se comunican entre s\xed a trav\xe9s de API, y cuentan con sistemas de almacenamiento propios, lo que evita la sobrecarga y ca\xedda de la aplicaci\xf3n."}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.strong,{children:"Visi\xf3n monol\xedtica"})}),"\n",(0,n.jsx)(i.mermaid,{value:"flowchart LR\r\n    id1[Navegador Web]\r\n    \r\n    subgraph webService[Servicio Web]\r\n        id2[Interfaz de la web]\r\n        id3[Pagos]\r\n        id4[Inventario]\r\n        id5[Env\xedos]\r\n\r\n        id2--xid3--xid4--xid5\r\n    end\r\n\r\n    id6[(Base de datos)]\r\n\r\n    id1<--\x3e|Informaci\xf3n| webService\r\n    webService<--\x3e|Informaci\xf3n| id6"}),"\n",(0,n.jsx)(i.p,{children:"La arquitectura monol\xedtica es un enfoque tradicional de desarrollo de software en el que toda la aplicaci\xf3n se desarrolla como un \xfanico y gran c\xf3digo base. La visi\xf3n central aqu\xed es tener una aplicaci\xf3n cohesiva y f\xe1cil de mantener en un solo repositorio."}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"Todos los componentes y funcionalidades de la aplicaci\xf3n est\xe1n integrados en un solo c\xf3digo base."}),"\n",(0,n.jsx)(i.li,{children:"La aplicaci\xf3n se divide en m\xf3dulos o capas, como la interfaz de usuario, la l\xf3gica de negocio y la base de datos, pero todos estos m\xf3dulos est\xe1n interconectados."}),"\n",(0,n.jsx)(i.li,{children:"Las actualizaciones o cambios en una parte de la aplicaci\xf3n pueden afectar a otras partes y requerir una implementaci\xf3n completa de la aplicaci\xf3n."}),"\n"]}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.strong,{children:"Visi\xf3n de microservicios"})}),"\n",(0,n.jsx)(i.p,{children:"La arquitectura de microservicios es un enfoque moderno en el que una aplicaci\xf3n se divide en peque\xf1os servicios independientes que funcionan de manera aut\xf3noma. La visi\xf3n principal aqu\xed es lograr una mayor escalabilidad, flexibilidad y mantenibilidad."}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"La aplicaci\xf3n se descompone en microservicios, que son componentes aut\xf3nomos e independientes, cada uno con su propia l\xf3gica de negocio y base de datos."}),"\n",(0,n.jsx)(i.li,{children:"Los microservicios se comunican entre s\xed a trav\xe9s de API o protocolos espec\xedficos."}),"\n",(0,n.jsx)(i.li,{children:"Cada microservicio puede estar desarrollado en diferentes lenguajes de programaci\xf3n y tecnolog\xedas seg\xfan las necesidades."}),"\n"]}),"\n",(0,n.jsx)(i.mermaid,{value:"flowchart LR\r\n    id1[Interfaz de la web]\r\n    id2[Pagos]\r\n    id3[Inventario]\r\n    id4[Env\xedos]\r\n\r\n    db1[(Base de datos)]\r\n    db2[(Base de datos)]\r\n    db3[(Base de datos)]\r\n\r\n    id1<--\x3e|Informaci\xf3n| id2\r\n    id1<--\x3e|Informaci\xf3n| id3\r\n    id1<--\x3e|Informaci\xf3n| id4\r\n\r\n    id2<--\x3edb1\r\n    id3<--\x3edb2\r\n    id4<--\x3edb3"}),"\n",(0,n.jsxs)(i.table,{children:[(0,n.jsx)(i.thead,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.th,{children:"Ventajas"}),(0,n.jsx)(i.th,{children:"Desventajas"})]})}),(0,n.jsxs)(i.tbody,{children:[(0,n.jsxs)(i.tr,{children:[(0,n.jsxs)(i.td,{children:[(0,n.jsx)(i.strong,{children:"Modularidad:"})," al tratarse de servicios aut\xf3nomos, se pueden desarrollar y desplegar de forma independiente. Adem\xe1s, un error en un servicio no deber\xeda afectar la capacidad de otros servicios para seguir trabajando seg\xfan lo previsto."]}),(0,n.jsxs)(i.td,{children:[(0,n.jsx)(i.strong,{children:"Alto consumo de memoria:"})," al tener cada microservicio sus propios recursos y bases de datos, consumen m\xe1s memoria y CPU."]})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsxs)(i.td,{children:[(0,n.jsx)(i.strong,{children:"Escalabilidad:"})," como es una aplicaci\xf3n modular, se puede escalar horizontalmente cada parte seg\xfan sea necesario, aumentando el escalado de los m\xf3dulos que tengan un procesamiento m\xe1s intensivo."]}),(0,n.jsxs)(i.td,{children:[(0,n.jsx)(i.strong,{children:"Inversi\xf3n de tiempo inicial:"})," al crear la arquitectura, se necesita m\xe1s tiempo para poder fragmentar los distintos microservicios e implementar la comunicaci\xf3n entre ellos."]})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsxs)(i.td,{children:[(0,n.jsx)(i.strong,{children:"Inversi\xf3n de tiempo inicial:"})," al crear la arquitectura, se necesita m\xe1s tiempo para poder fragmentar los distintos microservicios e implementar la comunicaci\xf3n entre ellos."]}),(0,n.jsxs)(i.td,{children:[(0,n.jsx)(i.strong,{children:"Complejidad en la gesti\xf3n:"})," si contamos con un gran n\xfamero de microservicios, ser\xe1 m\xe1s complicado controlar la gesti\xf3n e integraci\xf3n de los mismos. Es necesario disponer de una centralizaci\xf3n de trazas y herramientas avanzadas de procesamiento de informaci\xf3n que permitan tener una visi\xf3n general de todos los microservicios y orquesten el sistema."]})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsxs)(i.td,{children:[(0,n.jsx)(i.strong,{children:"Rapidez de actuaci\xf3n:"})," el reducido tama\xf1o de los microservicios permite un desarrollo menos costoso, as\xed como el uso de \u201ccontenedores de software\u201d permite que el despliegue de la aplicaci\xf3n se pueda llevar a cabo r\xe1pidamente."]}),(0,n.jsxs)(i.td,{children:[(0,n.jsx)(i.strong,{children:"Perfil de desarrollador:"})," los microservicios requieren desarrolladores experimentados con un nivel muy alto de experiencia y un control exhaustivo de las versiones. Adem\xe1s de conocimiento sobre soluci\xf3n de problemas como latencia en la red o balanceo de cargas."]})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsxs)(i.td,{children:[(0,n.jsx)(i.strong,{children:"Mantenimiento simple y barato:"})," al poder hacerse mejoras de un solo m\xf3dulo y no tener que intervenir en toda la estructura, el mantenimiento es m\xe1s sencillo y barato que en otras arquitecturas."]}),(0,n.jsxs)(i.td,{children:[(0,n.jsx)(i.strong,{children:"No uniformidad:"})," aunque disponer de un equipo tecnol\xf3gico diferente para cada uno de los servicios tiene sus ventajas, si no se gestiona correctamente, conducir\xe1 a un dise\xf1o y arquitectura de aplicaci\xf3n poco uniforme."]})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsxs)(i.td,{children:[(0,n.jsx)(i.strong,{children:"Agilidad:"})," se pueden utilizar funcionalidades t\xedpicas (autenticaci\xf3n, trazabilidad, etc.) que ya han sido desarrolladas por terceros, no hace falta que el desarrollador las cree de nuevo."]}),(0,n.jsxs)(i.td,{children:[(0,n.jsx)(i.strong,{children:"Dificultad en la realizaci\xf3n de pruebas:"})," debido a que los componentes de la aplicaci\xf3n est\xe1n distribuidos, las pruebas y test globales son m\xe1s complicados de realizar."]})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{}),(0,n.jsxs)(i.td,{children:[(0,n.jsx)(i.strong,{children:"Coste de implantaci\xf3n alto:"})," una arquitectura de microservicios puede suponer un alto coste de implantaci\xf3n debido a gastos en infraestructura y en pruebas distribuidas."]})]})]})]}),"\n",(0,n.jsx)(i.h3,{id:"la-arquitectura-de-los-microservicios",children:"La arquitectura de los microservicios"}),"\n",(0,n.jsx)(i.p,{children:"La mayor parte de las arquitecturas de microservicios tienen las siguientes caracter\xedsticas:"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.strong,{children:"Los componentes son servicios:"})," La principal manera de crear componentes es mediante la inserci\xf3n de un bot\xf3n que autom\xe1ticamente por detr\xe1s, gestione la descomposici\xf3n en servicios en lugar de bibliotecas. Los servicios son componentes separados que se comunican mediante mecanismos como los servicios web o los RPC en lugar de usar llamadas a funciones en memoria como hacen las bibliotecas."]}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.strong,{children:"Organizada en torno a las funcionalidades del negocio:"})," El sistema se divide en distintos servicios donde cada uno est\xe1 organizado en torno a una capacidad del negocio. Es muy importante limitar la responsabilidad de cada servicio. Cada servicio implementa toda la funcionalidad del negocio que agrupa desde la interfaz de usuario, la persistencia en el almacenamiento y cualquiera de las colaboraciones externas."]}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.strong,{children:"Productos, no proyectos:"})," En esta arquitectura normalmente se sigue la idea de que un equipo debe estar a cargo de un componente (servicio)."]}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.strong,{children:"Extremos inteligente:"})," Las aplicaciones creadas desde microservicios pretenden ser tan disociadas y cohesivas como sea posible, ellas poseen su propia l\xf3gica de dominio y act\xfaan como filtros en el cl\xe1sico sentido ",(0,n.jsx)(i.strong,{children:"UNIX"}),"."]}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.strong,{children:"Tener un gobierno descentralizado permite usar tecnolog\xedas que se adapten mejor a cada funcionalidad:"})," Con el sistema con m\xfaltiples servicios colaborativos, podemos decidir utilizar diferentes lenguajes de programaci\xf3n y tecnolog\xedas dentro de cada servicio."]}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.strong,{children:"Gesti\xf3n de datos descentralizada:"})," Los microservicios prefieren dejar a cada servicio que gestione su propia base de datos, sean estas diferentes instancias de la misma tecnolog\xeda de base de datos o sistemas de base de datos completamente diferentes."]}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.strong,{children:"Dise\xf1o tolerante a fallos:"})," Las aplicaciones necesitan ser dise\xf1adas de modo que puedan tolerar las fallas de los distintos servicios. Patrones m\xe1s importantes para conseguir estabilidad que se usan en la arquitectura de microservicios:"]}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"Reintento: Consiste en repetir una operaci\xf3n para la cual finaliz\xf3 su tiempo de espera."}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Encolar para reintentar"})," la operaci\xf3n para ser realizada m\xe1s tarde"]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Disyuntores:"})," Funcionan de forma similar a los interruptores autom\xe1ticos accionados por sobrecargas que hay en las instalaciones el\xe9ctricas. En el software existen para permitir que un subsistema ante una falla no destruya el sistema entero por sobrecarga y una vez que el peligro ha pasado pueda restablecerse."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Compartimentos estancos"})," para contenci\xf3n de da\xf1os manteni\xe9ndolos aislados"]}),"\n"]}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.strong,{children:"Automatizaci\xf3n de la infraestructura:"})," La mayor\xeda de los productos y sistemas desarrollados con el enfoque de\r\nmicroservicios han sido construidos por equipo que usan entrega continua y su precursor la integraci\xf3n continua.\r\nPara conseguir esto es necesario:"]}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Automatizar todo el proceso"}),", desde el chequeo del c\xf3digo, pruebas y despliegue."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Control de versiones y gesti\xf3n de configuraci\xf3n."})," Todo el software tiene que estar versionado y poder gestionar las distintas configuraciones para conseguir la entrega continua."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Arquitectura adecuada."})," La arquitectura tiene que permitir realizar cambios sin que afecten al resto del sistema. La arquitectura de microservicios lo hace posible."]}),"\n"]}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.strong,{children:"Dise\xf1o evolutivo."})," Cuando se divide el sistema en servicios hay que tener en cuenta que cada uno tiene que poder ser reemplazado o actualizado de forma independiente."]}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.strong,{children:"Seguridad de la arquitectura de microservicios"})}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"Los microservicios simplifican el monitoreo."}),"\n",(0,n.jsx)(i.li,{children:"Alivia algunos problemas de seguridad que surgen en aplicaciones monol\xedticas."}),"\n",(0,n.jsx)(i.li,{children:"Una brecha de seguridad podr\xeda ocurrir en una secci\xf3n sin afectar otras \xe1reas del proyecto"}),"\n",(0,n.jsxs)(i.li,{children:["Ofrecen resistencia ante ataques ",(0,n.jsx)(i.strong,{children:"DDoS"}),"."]}),"\n"]}),"\n",(0,n.jsx)(i.p,{children:"Sin embargo, todav\xeda existen desaf\xedos al proteger aplicaciones de microservicios, que incluyen:"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"M\xe1s \xe1reas de red est\xe1n abiertas a vulnerabilidades."}),"\n",(0,n.jsx)(i.li,{children:"Una menor coherencia general entre las actualizaciones de la aplicaci\xf3n permite m\xe1s violaciones de seguridad."}),"\n",(0,n.jsx)(i.li,{children:"Hay una mayor \xe1rea de ataque, a trav\xe9s de m\xfaltiples puertos API."}),"\n",(0,n.jsx)(i.li,{children:"Hay una falta de control de software de terceros."}),"\n",(0,n.jsx)(i.li,{children:"La seguridad debe mantenerse para cada servicio."}),"\n"]}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.strong,{children:"Despliegue de aplicaciones de microservicio"})}),"\n",(0,n.jsx)(i.p,{children:"Existen 3 conceptos que facilitan el despliegue de aplicaciones de microservicios:"}),"\n",(0,n.jsxs)(i.ol,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Contenedores:"})," Los contenedores son una tecnolog\xeda de virtualizaci\xf3n a nivel de sistema operativo que permite empacar una aplicaci\xf3n y todas sus dependencias en una unidad \xfanica llamada ",(0,n.jsx)(i.strong,{children:'"contenedor"'}),". Estos contenedores son port\xe1tiles y pueden ejecutarse de manera consistente en cualquier entorno que admita la tecnolog\xeda de contenedores, como ",(0,n.jsx)(i.strong,{children:"Docker"}),"."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Orquestaci\xf3n:"})," se refiere a la gesti\xf3n automatizada y coordinaci\xf3n de m\xfaltiples componentes o servicios de una aplicaci\xf3n distribuida. En el mundo de los contenedores, la orquestaci\xf3n se utiliza para administrar y escalar contenedores de manera eficiente, gestionar el ",(0,n.jsx)(i.strong,{children:"balanceo de carga"}),", ",(0,n.jsx)(i.strong,{children:"asegurar la alta disponibilidad"})," y ",(0,n.jsx)(i.strong,{children:"facilitar la implementaci\xf3n y actualizaci\xf3n"})," de aplicaciones en entornos de contenedores. ",(0,n.jsx)(i.strong,{children:"Kubernetes"})," es una de las herramientas de orquestaci\xf3n de contenedores m\xe1s populares y ampliamente utilizadas."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Malla:"})," Una malla de servicio es una capa de infraestructura que se utiliza para administrar la comunicaci\xf3n entre los diferentes componentes de una aplicaci\xf3n distribuida. Proporciona funciones como el ",(0,n.jsx)(i.strong,{children:"descubrimiento de servicios"}),", ",(0,n.jsx)(i.strong,{children:"el equilibrio de carga"}),", ",(0,n.jsx)(i.strong,{children:"la seguridad"}),", ",(0,n.jsx)(i.strong,{children:"la monitorizaci\xf3n"})," y la ",(0,n.jsx)(i.strong,{children:"gesti\xf3n del tr\xe1fico"}),", entre otras. Ejemplos de mallas de servicio populares son ",(0,n.jsx)(i.strong,{children:"Istio"})," y ",(0,n.jsx)(i.strong,{children:"Linkerd"}),"."]}),"\n"]}),"\n",(0,n.jsx)(i.h3,{id:"c\xf3mo-utilizar-los-microservicios",children:"\xbfC\xf3mo utilizar los microservicios?"}),"\n",(0,n.jsx)(i.p,{children:"Estos son los cinco elementos que un microservicio necesitar\xe1 antes de que pueda utilizarse en una arquitectura de aplicaci\xf3n distribuida"}),"\n",(0,n.jsxs)(i.ol,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Funcionalidad con un alcance adecuado."})," El primer elemento de un microservicio es definir lo que debe hacer. Una forma de definir el \xe1mbito adecuado es particionar los servicios a lo largo de las l\xedneas de funcionalidad l\xf3gica. Otro enfoque de alcance es reflejar la estructura de la organizaci\xf3n de desarrollo. Un tercer enfoque es minimizar un servicio a la cantidad de c\xf3digo que podr\xeda ser reintroducido por el equipo en un per\xedodo de dos semanas."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Preparaci\xf3n de una API."})," Una vez que descomponemos una aplicaci\xf3n en m\xfaltiples servicios que cooperan, \xbfc\xf3mo deben hablar esos servicios entre s\xed? Normalmente, esto se hace con llamadas a API de servicios web REST, aunque tambi\xe9n pueden utilizar otros mecanismos de transporte. Una buena idea es evitar saltar a la codificaci\xf3n de la API de forma inmediata. En su lugar es mejor hacer alg\xfan trabajo en papel o pizarra para definir lo que un servicio espec\xedfico debe exponer para funcionar correctamente."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Gesti\xf3n del tr\xe1fico."})," Desde la perspectiva del servicio de llamada, siempre debe realizar un seguimiento de sus llamadas y estar preparado para terminar si la respuesta toma demasiado tiempo. Desde la perspectiva del servicio llamado, el dise\xf1o de API debe incluir la posibilidad de enviar una respuesta que indique sobrecarga. Los servicios deben ser capaces tambi\xe9n de generar y matar nuevas instancias de servicio seg\xfan sea necesario para acomodar variaciones en la carga de tr\xe1fico."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Descarga de datos."})," Tener necesidad de una operaci\xf3n continua es muy diferente de lo que necesitan las aplicaciones tradicionales, que a menudo dejan de funcionar si falla la infraestructura subyacente. Para asegurarse de que los usuarios pueden seguir trabajando cuando falla una instancia, se pueden migrar datos espec\xedficos del usuario fuera de las instancias de servicio a un sistema compartido de almacenamiento redundante accesible desde todas las instancias de servicio. Otro enfoque de descarga de almacenamiento es insertar un sistema compartido de cach\xe9 basado en memoria entre un servicio dado y el almacenamiento asociado con ese servicio."]}),"\n",(0,n.jsx)(i.li,{children:"Monitorizaci\xf3n. El sistema de monitorizaci\xf3n de una aplicaci\xf3n basada en una arquitectura de microservicios debe permitir el cambio continuo de recursos, ser capaz de capturar datos de monitorizaci\xf3n en una ubicaci\xf3n central y mostrar informaci\xf3n que refleje la naturaleza con frecuencia cambiante de las aplicaciones de microservicios."}),"\n"]}),"\n",(0,n.jsx)(i.h3,{id:"caracter\xedsticas-de-los-microservicios-en-distintos-lenguajes",children:"Caracter\xedsticas de los microservicios en distintos lenguajes"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.strong,{children:"Patrones de dise\xf1o"})}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Creacionales:"})," Aquellos que tratan con las formas de crear instancias de objetos y cuyo objetivo es abstraer el proceso de instanciaci\xf3n y ocultar los detalles de c\xf3mo los objetos son creados o inicializados. En esta clase, se encuentran los siguientes:","\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"Abstract factory"}),"\n",(0,n.jsx)(i.li,{children:"Builder"}),"\n",(0,n.jsx)(i.li,{children:"Factory method"}),"\n",(0,n.jsx)(i.li,{children:"Prototype"}),"\n",(0,n.jsx)(i.li,{children:"Singleton"}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Estructurales:"})," Aquellos que describen c\xf3mo las clases y objetos (simples o compuestos) pueden ser combinados para formar grandes estructuras y proporcionar nuevas funcionalidades. En esta clase, se encuentran los siguientes:","\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"Adapter"}),"\n",(0,n.jsx)(i.li,{children:"Bridge"}),"\n",(0,n.jsx)(i.li,{children:"Composite"}),"\n",(0,n.jsx)(i.li,{children:"Decorator"}),"\n",(0,n.jsx)(i.li,{children:"Facade"}),"\n",(0,n.jsx)(i.li,{children:"Flyweight"}),"\n",(0,n.jsx)(i.li,{children:"Proxy"}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Comportamiento:"})," Aquellos que nos ayudan a definir la comunicaci\xf3n e iteraci\xf3n entre los objetos de un sistema. El prop\xf3sito de este patr\xf3n es reducir el acoplamiento entre los objetos. En esta clase se encuentran los siguientes:","\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"Chain of responsibility"}),"\n",(0,n.jsx)(i.li,{children:"Command"}),"\n",(0,n.jsx)(i.li,{children:"Interpreter"}),"\n",(0,n.jsx)(i.li,{children:"Iterator"}),"\n",(0,n.jsx)(i.li,{children:"Mediator"}),"\n",(0,n.jsx)(i.li,{children:"Memento"}),"\n",(0,n.jsx)(i.li,{children:"Observer"}),"\n",(0,n.jsx)(i.li,{children:"State"}),"\n",(0,n.jsx)(i.li,{children:"Strategy"}),"\n",(0,n.jsx)(i.li,{children:"Template method"}),"\n",(0,n.jsx)(i.li,{children:"Visitor"}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(i.li,{children:["Otros:","\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"Arquitectura en pizarra"}),"\n",(0,n.jsx)(i.li,{children:"DAO: Data Access Object"}),"\n",(0,n.jsx)(i.li,{children:"DTO: Data Transfer Object"}),"\n",(0,n.jsx)(i.li,{children:"EDA: arquitectura dirigida por eventos"}),"\n",(0,n.jsx)(i.li,{children:"Invocaci\xf3n impl\xedcita"}),"\n",(0,n.jsx)(i.li,{children:"Objetos desnudos"}),"\n",(0,n.jsx)(i.li,{children:"Programaci\xf3n por capas"}),"\n",(0,n.jsx)(i.li,{children:"Peer-to-peer"}),"\n",(0,n.jsx)(i.li,{children:"Pipeline"}),"\n",(0,n.jsx)(i.li,{children:"SOA: arquitectura orientada a servicios"}),"\n",(0,n.jsx)(i.li,{children:"Modelo/Vista/Controlador"}),"\n",(0,n.jsx)(i.li,{children:"Modelo/Vista/Presentador"}),"\n",(0,n.jsx)(i.li,{children:"Modelo/Vista/Presentador con Presentador del Modelo"}),"\n",(0,n.jsx)(i.li,{children:"Modelo/Vista/Vista-Modelo"}),"\n",(0,n.jsx)(i.li,{children:"Modelo/Vista/Presentador con Vista Pasiva"}),"\n",(0,n.jsx)(i.li,{children:"Modelo/Vista/Presentador con Controlador Supervisor"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.strong,{children:"Lenguajes de programaci\xf3n, su arquitectura y caracter\xedsticas"})}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.strong,{children:"Docker"})}),"\n",(0,n.jsx)(i.p,{children:"Docker es una plataforma de c\xf3digo abierto que se utiliza para desarrollar, implementar y ejecutar aplicaciones en contenedores. Los contenedores son entornos ligeros y port\xe1tiles que incluyen todo lo necesario para ejecutar una aplicaci\xf3n, como el c\xf3digo, las bibliotecas y las dependencias. Docker simplifica la gesti\xf3n de aplicaciones al encapsularlas en contenedores, lo que facilita su despliegue en diferentes entornos, como servidores locales, nubes p\xfablicas o entornos de desarrollo."}),"\n",(0,n.jsx)(i.p,{children:"Para ejecutar contenedores, hay dos tipos de tiempos de ejecuci\xf3n:"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"Los contenedores de Windows Server ofrecen aislamiento de aplicaciones a trav\xe9s de tecnolog\xeda de aislamiento de proceso y de espacio de nombres. Un contenedor de Windows Server comparte el kernel con el host de contenedor y con todos los contenedores que se ejecutan en el host."}),"\n",(0,n.jsx)(i.li,{children:"Los contenedores de Hyper-V ampl\xedan el aislamiento que ofrecen los contenedores de Windows Server mediante la ejecuci\xf3n de cada contenedor en una m\xe1quina virtual altamente optimizada. En esta configuraci\xf3n, el kernel (n\xfacleo) del host (anfitri\xf3n) del contenedor no se comparte con los contenedores de Hyper-V, lo que proporciona un mejor aislamiento."}),"\n"]}),"\n",(0,n.jsx)(i.p,{children:"La aplicaci\xf3n consta de estos tipos de componentes:"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"Componentes de presentaci\xf3n. Estos componentes son los responsables del control de la interfaz de usuario y el consumo de servicios remotos."}),"\n",(0,n.jsx)(i.li,{children:"L\xf3gica de dominio o de negocios. Este componente es la l\xf3gica de dominio de la aplicaci\xf3n."}),"\n",(0,n.jsx)(i.li,{children:"L\xf3gica de acceso a bases de datos. Este componente est\xe1 formado por componentes de acceso a datos responsables de acceder a las bases de datos (SQL o NoSQL)."}),"\n",(0,n.jsx)(i.li,{children:"L\xf3gica de integraci\xf3n de aplicaciones. Este componente incluye un canal de mensajer\xeda basado en agentes de mensajes."}),"\n"]})]})}function u(e={}){const{wrapper:i}={...(0,a.a)(),...e.components};return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(t,{...e})}):t(e)}},1151:(e,i,s)=>{s.d(i,{Z:()=>d,a:()=>o});var n=s(7294);const a={},r=n.createContext(a);function o(e){const i=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function d(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),n.createElement(r.Provider,{value:i},e.children)}}}]);