"use strict";(self.webpackChunkapuntes_dart=self.webpackChunkapuntes_dart||[]).push([[7280],{1167:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>t,toc:()=>d});var s=n(5893),i=n(1151);const o={sidebar_position:2},r="Lenguajes de Programaci\xf3n",t={id:"introduccion-a-la-programacion/lenguaje-de-programacion",title:"Lenguajes de Programaci\xf3n",description:"Un lenguaje de programaci\xf3n es un lenguaje formal (o artificial, es decir, un lenguaje con reglas gramaticales bien definidas) que proporciona a una persona, en este caso el programador, la capacidad y habilidad de escribir (o programar) una serie de instrucciones o secuencias de \xf3rdenes en forma de algoritmos con el fin de controlar el comportamiento f\xedsico o l\xf3gico de un sistema inform\xe1tico, para que de esa manera se puedan obtener diversas clases de datos o ejecutar determinadas tareas. A todo este conjunto de \xf3rdenes escritas mediante un lenguaje de programaci\xf3n se le denomina programa inform\xe1tico.",source:"@site/docs/introduccion-a-la-programacion/lenguaje-de-programacion.md",sourceDirName:"introduccion-a-la-programacion",slug:"/introduccion-a-la-programacion/lenguaje-de-programacion",permalink:"/apuntes/docs/introduccion-a-la-programacion/lenguaje-de-programacion",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Introducci\xf3n a la Programaci\xf3n",permalink:"/apuntes/docs/introduccion-a-la-programacion/intro-programacion"},next:{title:"Diagramas de Flujo",permalink:"/apuntes/docs/introduccion-a-la-programacion/diagramas-de-flujo"}},c={},d=[{value:"Elementos de un Lenguaje de Programaci\xf3n",id:"elementos-de-un-lenguaje-de-programaci\xf3n",level:2},{value:"Variables y vectores",id:"variables-y-vectores",level:3},{value:"Condicionales",id:"condicionales",level:3},{value:"Bucles",id:"bucles",level:3},{value:"Funciones",id:"funciones",level:3},{value:"Sintaxis",id:"sintaxis",level:3},{value:"Sem\xe1ntica est\xe1tica",id:"sem\xe1ntica-est\xe1tica",level:3},{value:"Sistema de tipos",id:"sistema-de-tipos",level:3},{value:"Implementaci\xf3n",id:"implementaci\xf3n",level:3}];function l(e){const a={h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(a.h1,{id:"lenguajes-de-programaci\xf3n",children:"Lenguajes de Programaci\xf3n"}),"\n",(0,s.jsx)(a.p,{children:"Un lenguaje de programaci\xf3n es un lenguaje formal (o artificial, es decir, un lenguaje con reglas gramaticales bien definidas) que proporciona a una persona, en este caso el programador, la capacidad y habilidad de escribir (o programar) una serie de instrucciones o secuencias de \xf3rdenes en forma de algoritmos con el fin de controlar el comportamiento f\xedsico o l\xf3gico de un sistema inform\xe1tico, para que de esa manera se puedan obtener diversas clases de datos o ejecutar determinadas tareas. A todo este conjunto de \xf3rdenes escritas mediante un lenguaje de programaci\xf3n se le denomina programa inform\xe1tico."}),"\n",(0,s.jsx)(a.p,{children:"El lenguaje de programaci\xf3n permite especificar de manera precisa sobre qu\xe9 datos debe operar un software espec\xedfico, c\xf3mo deben ser almacenados o transmitidos dichos datos, y qu\xe9 acciones debe tomar el software bajo una variada gama de circunstancias. Todo esto, a trav\xe9s de un lenguaje que intenta estar relativamente pr\xf3ximo al lenguaje humano o natural. Una caracter\xedstica relevante de los lenguajes de programaci\xf3n es precisamente que m\xe1s de un programador pueda usar un conjunto com\xfan de instrucciones que sean comprendidas entre ellos para realizar la construcci\xf3n de un programa de forma colaborativa."}),"\n",(0,s.jsx)(a.h2,{id:"elementos-de-un-lenguaje-de-programaci\xf3n",children:"Elementos de un Lenguaje de Programaci\xf3n"}),"\n",(0,s.jsx)(a.h3,{id:"variables-y-vectores",children:"Variables y vectores"}),"\n",(0,s.jsx)(a.p,{children:"Las variables son t\xedtulos asignados a espacios en memoria para almacenar datos espec\xedficos. Son contenedores de datos y por ello se diferencian seg\xfan el tipo de dato que son capaces de almacenar. En la mayor\xeda de lenguajes de programaci\xf3n se requiere especificar un tipo de variable concreto para guardar un dato espec\xedfico. Por ejemplo, en Java, si deseamos guardar una cadena de texto debemos especificar que la variable es del tipo String. Por otra parte, en lenguajes como PHP o JavaScript este tipo de especificaci\xf3n de variables no es necesario. Adem\xe1s, existen variables compuestas llamadas vectores. Un vector no es m\xe1s que un conjunto de bytes consecutivos en memoria y del mismo tipo guardados dentro de una variable contenedor. A continuaci\xf3n, un listado con los tipos de variables y vectores m\xe1s comunes:"}),"\n",(0,s.jsxs)(a.table,{children:[(0,s.jsx)(a.thead,{children:(0,s.jsxs)(a.tr,{children:[(0,s.jsx)(a.th,{children:"Tipo de Dato"}),(0,s.jsx)(a.th,{children:"Descripci\xf3n"})]})}),(0,s.jsxs)(a.tbody,{children:[(0,s.jsxs)(a.tr,{children:[(0,s.jsx)(a.td,{children:"Char"}),(0,s.jsx)(a.td,{children:"Estas variables contienen un \xfanico car\xe1cter, es decir, una letra, un signo o un n\xfamero."})]}),(0,s.jsxs)(a.tr,{children:[(0,s.jsx)(a.td,{children:"Int"}),(0,s.jsx)(a.td,{children:"Contienen un n\xfamero entero."})]}),(0,s.jsxs)(a.tr,{children:[(0,s.jsx)(a.td,{children:"Float"}),(0,s.jsx)(a.td,{children:"Contienen un n\xfamero decimal."})]}),(0,s.jsxs)(a.tr,{children:[(0,s.jsx)(a.td,{children:"String"}),(0,s.jsx)(a.td,{children:"Contienen cadenas de texto, o lo que es lo mismo, es un vector con varias variables del tipo Char."})]}),(0,s.jsxs)(a.tr,{children:[(0,s.jsx)(a.td,{children:"Boolean"}),(0,s.jsxs)(a.td,{children:["Solo pueden contener un cero (",(0,s.jsx)(a.strong,{children:"false"}),") o un uno (",(0,s.jsx)(a.strong,{children:"true"}),")."]})]})]})]}),"\n",(0,s.jsx)(a.h3,{id:"condicionales",children:"Condicionales"}),"\n",(0,s.jsx)(a.p,{children:"Las sentencias condicionales son estructuras de c\xf3digo que indican que, para que cierta parte del programa se ejecute, deben cumplirse ciertas premisas; por ejemplo: que dos valores sean iguales, que un valor exista, que un valor sea mayor que otro\u2026 Estos condicionantes por lo general solo se ejecutan una vez a lo largo del programa. Los condicionantes m\xe1s conocidos y empleados en programaci\xf3n son:"}),"\n",(0,s.jsxs)(a.ul,{children:["\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.strong,{children:"if"}),": Indica una condici\xf3n para que se ejecute una parte del programa."]}),"\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.strong,{children:"else if"}),': Siempre va precedido de un "If" e indica una condici\xf3n para que se ejecute una parte del programa siempre que no cumpla la condici\xf3n del if previo y s\xed se cumpla con la que el "else if" especifique.']}),"\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.strong,{children:"else"}),': Siempre precedido de "if" y en ocasiones de "else if". Indica que debe ejecutarse cuando no se cumplan las condiciones previas.']}),"\n"]}),"\n",(0,s.jsx)(a.h3,{id:"bucles",children:"Bucles"}),"\n",(0,s.jsx)(a.p,{children:"Los bucles son parientes cercanos de los condicionantes, pero ejecutan constantemente un c\xf3digo mientras se cumpla una determinada condici\xf3n. Los m\xe1s frecuentes son:"}),"\n",(0,s.jsxs)(a.ul,{children:["\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.strong,{children:"for"}),": Ejecuta un c\xf3digo mientras una variable se encuentre entre 2 determinados par\xe1metros."]}),"\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.strong,{children:"while"}),": Ejecuta un c\xf3digo mientras que se cumpla la condici\xf3n que solicita."]}),"\n"]}),"\n",(0,s.jsx)(a.h3,{id:"funciones",children:"Funciones"}),"\n",(0,s.jsx)(a.p,{children:"Las funciones se crearon para evitar tener que repetir constantemente fragmentos de c\xf3digo. Una funci\xf3n podr\xeda considerarse como una variable que encierra c\xf3digo dentro de si. Por lo tanto, cuando accedemos a dicha variable (la funci\xf3n) en realidad lo que estamos haciendo es ordenar al programa que ejecute un determinado c\xf3digo predefinido anteriormente."}),"\n",(0,s.jsx)(a.p,{children:"Todos los lenguajes de programaci\xf3n tienen algunos elementos de formaci\xf3n primitivos para la descripci\xf3n de los datos y de los procesos o transformaciones aplicadas a estos datos (tal como la suma de dos n\xfameros o la selecci\xf3n de un elemento que forma parte de una colecci\xf3n). Estos elementos primitivos son definidos por reglas sint\xe1cticas y sem\xe1nticas que describen su estructura y significado respectivamente."}),"\n",(0,s.jsx)(a.h3,{id:"sintaxis",children:"Sintaxis"}),"\n",(0,s.jsx)(a.p,{children:"A la forma visible de un lenguaje de programaci\xf3n se la conoce como sintaxis. La mayor\xeda de los lenguajes de programaci\xf3n son puramente textuales, es decir, utilizan secuencias de texto que incluyen palabras, n\xfameros y puntuaci\xf3n, de manera similar a los lenguajes naturales escritos. Por otra parte, hay algunos lenguajes de programaci\xf3n que son m\xe1s gr\xe1ficos en su naturaleza, utilizando relaciones visuales entre s\xedmbolos para especificar un programa."}),"\n",(0,s.jsx)(a.p,{children:"La sintaxis de un lenguaje de programaci\xf3n describe las combinaciones posibles de los s\xedmbolos que forman un programa sint\xe1cticamente correcto. El significado que se le da a una combinaci\xf3n de s\xedmbolos es manejado por su sem\xe1ntica (ya sea formal o como parte del c\xf3digo duro de la referencia de implementaci\xf3n). La mayor\xeda de los lenguajes son textuales."}),"\n",(0,s.jsx)(a.h3,{id:"sem\xe1ntica-est\xe1tica",children:"Sem\xe1ntica est\xe1tica"}),"\n",(0,s.jsxs)(a.p,{children:["La sem\xe1ntica est\xe1tica define las restricciones sobre la estructura de los textos v\xe1lidos que resulta imposible o muy dif\xedcil expresar mediante formalismos sint\xe1cticos est\xe1ndar. Para los lenguajes compilados, la sem\xe1ntica est\xe1tica b\xe1sicamente incluye las reglas sem\xe1nticas que se pueden verificar en el momento de compilar. Por ejemplo el chequeo de que cada identificador sea declarado antes de ser usado (en lenguajes que requieren tales declaraciones) o que las etiquetas en cada brazo de una estructura case sean distintas. Muchas restricciones importantes de este tipo, como la validaci\xf3n de que los identificadores sean usados en los contextos apropiados (por ejemplo no sumar un entero al nombre de una funci\xf3n), o que las llamadas a subrutinas tengan el n\xfamero y tipo de par\xe1metros adecuado, pueden ser implementadas defini\xe9ndolas como reglas en una l\xf3gica conocida como sistema de tipos. Otras formas de an\xe1lisis est\xe1ticos, como los an\xe1lisis de flujo de datos, tambi\xe9n pueden ser parte de la sem\xe1ntica est\xe1tica. Otros lenguajes de programaci\xf3n como ",(0,s.jsx)(a.strong,{children:"Java"})," y ",(0,s.jsx)(a.strong,{children:"C#"})," tienen un an\xe1lisis definido de asignaciones, una forma de an\xe1lisis de flujo de datos, como parte de su sem\xe1ntica est\xe1tica."]}),"\n",(0,s.jsx)(a.h3,{id:"sistema-de-tipos",children:"Sistema de tipos"}),"\n",(0,s.jsx)(a.p,{children:"Se refiere a las reglas que gobiernan el uso de tipos de datos en un lenguaje. Define c\xf3mo se pueden combinar y manipular diferentes tipos de datos. Hay varios tipos de sistemas de tipos, y su implementaci\xf3n puede variar seg\xfan el lenguaje de programaci\xf3n. Aqu\xed hay algunas categor\xedas comunes de sistemas de tipos:"}),"\n",(0,s.jsxs)(a.ol,{children:["\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.strong,{children:"Tipado Est\xe1tico"}),": En un sistema de tipado est\xe1tico, los tipos de variables son verificados en tiempo de compilaci\xf3n. Esto significa que el tipo de cada variable debe ser declarado expl\xedcitamente, y el compilador verifica la correcci\xf3n de los tipos antes de que el programa se ejecute. Ejemplos de lenguajes con tipado est\xe1tico incluyen Java, C++ y Rust."]}),"\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.strong,{children:"Tipado Din\xe1mico"}),": En un sistema de tipado din\xe1mico, los tipos de variables se verifican en tiempo de ejecuci\xf3n. No es necesario declarar el tipo de variable expl\xedcitamente, ya que el tipo se puede determinar durante la ejecuci\xf3n del programa. Python, JavaScript y Ruby son ejemplos de lenguajes con tipado din\xe1mico."]}),"\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.strong,{children:"Tipos Fuertes vs. Tipos D\xe9biles"}),": En un sistema de tipos fuertes, la conversi\xf3n entre tipos de datos est\xe1 limitada y se realiza de manera expl\xedcita. En un sistema de tipos d\xe9biles, la conversi\xf3n entre tipos puede ocurrir de manera m\xe1s impl\xedcita. Los lenguajes con tipos fuertes tienden a ser m\xe1s estrictos en cuanto a la compatibilidad de tipos. Por ejemplo, en ",(0,s.jsx)(a.strong,{children:"Python"})," (",(0,s.jsx)(a.strong,{children:"tipado din\xe1mico"}),"), una operaci\xf3n entre tipos incompatibles generar\xe1 un error en tiempo de ejecuci\xf3n."]}),"\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.strong,{children:"Tipos Simples vs. Tipos Compuestos"}),": Los tipos simples representan datos individuales (enteros, decimales, caracteres), mientras que los tipos compuestos combinan varios elementos en una sola entidad. Los tipos compuestos pueden ser arrays, estructuras, listas, entre otros. C y Java son ejemplos de lenguajes que admiten ambos tipos de sistemas."]}),"\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.strong,{children:"Inferencia de Tipos"}),": Algunos lenguajes permiten la inferencia de tipos, donde el compilador o el int\xe9rprete deduce autom\xe1ticamente el tipo de una variable seg\xfan su contexto. Esto reduce la necesidad de declarar expl\xedcitamente el tipo de cada variable. Lenguajes como Swift, Kotlin y TypeScript utilizan la inferencia de tipos."]}),"\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.strong,{children:"Polimorfismo"}),": El polimorfismo permite que un mismo c\xf3digo trabaje con diferentes tipos de datos de manera transparente. Puede ser est\xe1tico (sobrecarga de operadores en tiempo de compilaci\xf3n) o din\xe1mico (sobrescritura de m\xe9todos en tiempo de ejecuci\xf3n). Los lenguajes orientados a objetos, como Java y C#, suelen hacer uso de polimorfismo."]}),"\n"]}),"\n",(0,s.jsx)(a.h3,{id:"implementaci\xf3n",children:"Implementaci\xf3n"}),"\n",(0,s.jsxs)(a.p,{children:["La implementaci\xf3n de un lenguaje es la que provee una manera de que se ejecute un programa para una determinada combinaci\xf3n de software y hardware. Existen b\xe1sicamente dos maneras de implementar un lenguaje: ",(0,s.jsx)(a.strong,{children:"compilaci\xf3n"})," e ",(0,s.jsx)(a.strong,{children:"interpretaci\xf3n"}),"."]}),"\n",(0,s.jsxs)(a.ul,{children:["\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.strong,{children:"Compilaci\xf3n:"})," es el proceso que traduce un programa escrito en un lenguaje de programaci\xf3n a otro lenguaje de programaci\xf3n, generando un programa equivalente que la m\xe1quina ser\xe1 capaz de interpretar. Los programas traductores que pueden realizar esta operaci\xf3n se llaman compiladores. Estos, como los programas ensambladores avanzados, pueden generar muchas l\xedneas de c\xf3digo de m\xe1quina por cada proposici\xf3n del programa fuente."]}),"\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.strong,{children:"Interpretaci\xf3n:"})," es una asignaci\xf3n de significados a las f\xf3rmulas bien formadas de un lenguaje formal. Como los lenguajes formales pueden definirse en t\xe9rminos puramente sint\xe1cticos, sus f\xf3rmulas bien formadas pueden no ser m\xe1s que cadenas de s\xedmbolos sin ning\xfan significado. Una interpretaci\xf3n otorga significado a esas f\xf3rmulas."]}),"\n"]})]})}function u(e={}){const{wrapper:a}={...(0,i.a)(),...e.components};return a?(0,s.jsx)(a,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},1151:(e,a,n)=>{n.d(a,{Z:()=>t,a:()=>r});var s=n(7294);const i={},o=s.createContext(i);function r(e){const a=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function t(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:a},e.children)}}}]);